📁 src
  📁 components
    📁 ProductCard
      📄 index.scss
      📄 index.tsx
    📁 ProductDetail
      📄 index.scss
      📄 index.tsx
  📁 pages
    📁 product
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx

===== File: components\ProductCard\index.scss =====
.product-card {
  width: 100%;
  background-color: #fff;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
  margin-bottom: 16px;
  transition: transform 0.2s, box-shadow 0.2s;
  
  &--active {
    transform: scale(0.98);
    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.08);
  }
  
  &__image-wrap {
    width: 100%;
    height: 180px;
    position: relative;
    overflow: hidden;
  }
  
  &__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }
  
  &__image-loading,
  &__image-error {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f5f5f5;
  }
  
  &__image-error {
    color: #999;
    font-size: 14px;
  }
  
  &__info {
    padding: 12px 16px 16px;
    text-align: center;
  }
  
  &__title {
    font-size: 18px;
    font-weight: 600;
    color: #333;
    line-height: 1.4;
    margin-bottom: 12px;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  &__price-info {
    display: inline-flex;
    align-items: center;
    margin: 0 auto;
  }
  
  &__price-label {
    font-size: 13px;
    color: #666;
    margin-right: 4px;
  }
  
  &__price-value {
    font-size: 20px;
    font-weight: 600;
    color: #FF6010;
  }
}
===== End of File: components\ProductCard\index.scss =====


===== File: components\ProductCard\index.tsx =====
import React, { useState, memo } from 'react';
import { View, Text, Image } from '@tarojs/components';
import { Loading } from '@nutui/nutui-react-taro';
import './index.scss';

interface ProductCardProps {
  image: string;
  title: string;
  specifications: string;
  onClick?: () => void;
}

const ProductCard: React.FC<ProductCardProps> = memo(({
  image,
  title,
  specifications,
  onClick
}) => {
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageError, setImageError] = useState(false);

  return (
    <View 
      className="product-card" 
      onClick={onClick} 
      hoverClass="product-card--active"
    >
      <View className="product-card__image-wrap">
        {!imageLoaded && !imageError && (
          <View className="product-card__image-loading">
            <Loading  />
          </View>
        )}
        {imageError && (
          <View className="product-card__image-error">
            <Text>加载失败</Text>
          </View>
        )}
        <Image 
          src={image} 
          mode="aspectFill" 
          className="product-card__image"
          lazyLoad
          onLoad={() => setImageLoaded(true)}
          onError={() => setImageError(true)}
          style={{ opacity: imageLoaded ? 1 : 0 }}
        />
      </View>
      
      <View className="product-card__info">
        <Text className="product-card__title">{title}</Text>
        <View className="product-card__price-info">
          <Text className="product-card__price-label">全国统一零售价：</Text>
          <Text className="product-card__price-value">{specifications}</Text>
        </View>
      </View>
    </View>
  );
});

export default ProductCard;
===== End of File: components\ProductCard\index.tsx =====


===== File: components\ProductDetail\index.scss =====
.detail {
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: #fff;
  
  /* 关闭按钮 */
  &__close {
    position: absolute;
    top: 16px;
    left: 16px;
    width: 36px;
    height: 36px;
    background-color: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    
    &-icon {
      color: #fff;
      font-size: 20px;
      line-height: 1;
    }
  }
  
  /* 滚动区域 */
  &__scroll {
    flex: 1;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    padding-bottom: 80px; /* 为底部按钮留出空间 */
  }
  
  /* 图片轮播区域 */
  &__gallery {
    position: relative;
    width: 100%;
    height: 280px;
    background-color: #f5f5f5;
    
    &-scroll {
      height: 100%;
      width: 100%;
      white-space: nowrap;
      
      &::-webkit-scrollbar {
        display: none;
      }
    }
    
    &-item {
      display: inline-block;
      width: 100%;
      height: 100%;
    }
    
    &-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    /* 指示器 */
    &-indicators {
      position: absolute;
      bottom: 16px;
      left: 0;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 2;
    }
    
    &-indicator {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background-color: rgba(255, 255, 255, 0.6);
      margin: 0 4px;
      transition: all 0.3s ease;
      
      &--active {
        width: 18px;
        border-radius: 3px;
        background-color: #fff;
      }
    }
  }
  
  /* 产品信息 */
  &__info {
    padding: 16px 20px;
    text-align: center;
  }
  
  /* 产品标题 */
  &__title {
    font-size: 22px;
    font-weight: 700;
    color: #333;
    line-height: 1.4;
    margin-bottom: 16px;
    display: block;
  }
  
  /* 价格信息 */
  &__price-info {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    text-align: left;
  }
  
  &__price-label {
    font-size: 15px;
    color: #666;
    margin-right: 10px;
    width: 60px;
  }
  
  &__price-value {
    font-size: 15px;
    color: #333;
    flex: 1;
    font-weight: 500;
  }
  
  /* 规格信息 */
  &__specs {
    text-align: left;
    padding-bottom: 16px;
    margin-bottom: 20px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  &__spec-item {
    display: flex;
    align-items: center;
  }
  
  &__spec-label {
    font-size: 15px;
    color: #666;
    margin-right: 10px;
    width: 60px;
  }
  
  &__spec-value {
    font-size: 15px;
    color: #333;
    flex: 1;
    font-weight: 500;
  }
  
  /* 内容区块 */
  &__section {
    text-align: left;
    margin-bottom: 22px;
    
    &-header {
      margin-bottom: 12px;
    }
    
    &-title {
      font-size: 17px;
      font-weight: 600;
      color: #333;
      position: relative;
      padding-left: 12px;
      display: block;
      
      &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 4px;
        height: 17px;
        background-color: #2563EB; /* 原始的蓝色 */
        border-radius: 2px;
      }
    }
    
    &-content {
      font-size: 15px;
      line-height: 1.7;
      color: #555;
      display: block;
    }
  }
  
  /* 底部固定操作栏 */
  &__footer {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: #fff;
    padding: 16px 20px;
    padding-bottom: calc(16px + env(safe-area-inset-bottom));
    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
    z-index: 5;
  }
  
  &__contact-btn {
    height: 48px;
    font-size: 16px;
    font-weight: 500;
    border-radius: 8px;
    background: #2563EB; /* 原始的蓝色 */
    border: none;
  }
}
===== End of File: components\ProductDetail\index.scss =====


===== File: components\ProductDetail\index.tsx =====
import React, { useState, useEffect } from 'react';
import { View, Text, Image, ScrollView } from '@tarojs/components';
import { Button } from '@nutui/nutui-react-taro';
import { WaterproofCoating } from 'src/services/api/product/types';
import './index.scss';

interface ProductDetailProps {
  product: WaterproofCoating;
  visible: boolean;
  onClose: () => void;
  onContactClick?: () => void;
}

const ProductDetail: React.FC<ProductDetailProps> = ({ 
  product, 
  visible, 
  onClose,
  onContactClick
}) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  
  useEffect(() => {
    setCurrentImageIndex(0);
  }, [product?.id]);
  
  const handleContactClick = () => {
    if (onContactClick) {
      onContactClick();
    }
  };
  
  if (!visible || !product) return null;
  
  return (
    <View className="detail">
      {/* 关闭按钮 */}
      <View className="detail__close" onClick={onClose}>
        <Text className="detail__close-icon">×</Text>
      </View>
      
      <ScrollView 
        scrollY 
        className="detail__scroll"
        enhanced
        showScrollbar={false}
      >
        {/* 图片轮播区域 */}
        <View className="detail__gallery">
          <ScrollView 
            scrollX 
            className="detail__gallery-scroll"
            scrollWithAnimation
            onScroll={(e) => {
              if (product.images.length > 1) {
                const { scrollLeft, scrollWidth } = e.detail;
                const itemWidth = scrollWidth / product.images.length;
                const index = Math.round(scrollLeft / itemWidth);
                if (index !== currentImageIndex && index >= 0 && index < product.images.length) {
                  setCurrentImageIndex(index);
                }
              }
            }}
          >
            {product.images.map((image, index) => (
              <View 
                key={`img-${index}`}
                className="detail__gallery-item"
              >
                <Image 
                  src={image} 
                  className="detail__gallery-image" 
                  mode="aspectFill"
                  lazyLoad
                />
              </View>
            ))}
          </ScrollView>
          
          {/* 图片指示器 */}
          {product.images.length > 1 && (
            <View className="detail__gallery-indicators">
              {product.images.map((_, index) => (
                <View 
                  key={`indicator-${index}`}
                  className={`detail__gallery-indicator ${
                    currentImageIndex === index ? 'detail__gallery-indicator--active' : ''
                  }`}
                />
              ))}
            </View>
          )}
        </View>
        
        {/* 产品信息 */}
        <View className="detail__info">
          {/* 产品标题 */}
          <Text className="detail__title">{product.title}</Text>
          
          {/* 价格信息 */}
          <View className="detail__price-info">
            <Text className="detail__price-label">全国统一零售价：</Text>
            <Text className="detail__price-value">{product.specifications}</Text>
          </View>
          
          {/* 规格信息 */}
          <View className="detail__specs">
            <View className="detail__spec-item">
              <Text className="detail__spec-label">规格:</Text>
              <Text className="detail__spec-value">{product.type}</Text>
            </View>
          </View>
          
          {/* 产品简介 */}
          <View className="detail__section">
            <View className="detail__section-header">
              <Text className="detail__section-title">产品简介</Text>
            </View>
            <Text className="detail__section-content">{product.description}</Text>
          </View>
          
          {/* 适用范围 */}
          <View className="detail__section">
            <View className="detail__section-header">
              <Text className="detail__section-title">适用范围</Text>
            </View>
            <Text className="detail__section-content">{product.content}</Text>
          </View>
        </View>
      </ScrollView>
      
      {/* 固定在底部的咨询按钮 */}
      <View className="detail__footer">
        <Button 
          type="primary" 
          block
          className="detail__contact-btn"
          onClick={handleContactClick}
        >
          咨询此产品
        </Button>
      </View>
    </View>
  );
};

export default ProductDetail;
===== End of File: components\ProductDetail\index.tsx =====


===== File: pages\product\index.config.ts =====
export default definePageConfig({
  navigationBarTitleText: '产品'
})
===== End of File: pages\product\index.config.ts =====


===== File: pages\product\index.scss =====
.product-page {
  min-height: 100vh;
  background-color: #f8f8f8;
  
  &__container {
    padding: 16px;
    padding-bottom: env(safe-area-inset-bottom);
    padding-top: calc(env(safe-area-inset-top) + 10px);
  }
  
  /* 产品列表 */
  .product-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
    margin-bottom: 20px;
    
    &__item {
      opacity: 0;
      transform: translateY(10px);
      animation: fadeIn 0.4s ease forwards;
      
      @for $i from 1 through 10 {
        &:nth-child(#{$i}) {
          animation-delay: #{$i * 0.08}s;
        }
      }
    }
    
    /* 骨架屏 */
    &__skeletons {
      display: grid;
      grid-template-columns: 1fr;
      gap: 16px;
    }
  }
  
  /* 产品骨架屏 */
  .product-skeleton {
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.06);
    
    &__image {
      width: 100%;
      height: 200px;
      background: linear-gradient(90deg, #f2f2f2 25%, #e6e6e6 50%, #f2f2f2 75%);
      background-size: 400% 100%;
      animation: shimmer 1.5s infinite linear;
    }
    
    &__content {
      padding: 12px 16px 16px;
    }
    
    &__title {
      height: 16px;
      width: 90%;
      margin-bottom: 6px;
      background: linear-gradient(90deg, #f2f2f2 25%, #e6e6e6 50%, #f2f2f2 75%);
      background-size: 400% 100%;
      animation: shimmer 1.5s infinite linear;
      border-radius: 4px;
    }
    
    &__title:nth-child(2) {
      width: 70%;
      margin-bottom: 14px;
    }
    
    &__price {
      height: 36px;
      width: 100%;
      background: linear-gradient(90deg, #f2f2f2 25%, #e6e6e6 50%, #f2f2f2 75%);
      background-size: 400% 100%;
      animation: shimmer 1.5s infinite linear;
      border-radius: 6px;
    }
  }
  
  /* 空状态 */
  &__empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 60vh;
    margin-top: 10%;
  }
  
  /* 动画效果 */
  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes shimmer {
    0% {
      background-position: 100% 0;
    }
    100% {
      background-position: -100% 0;
    }
  }
}

/* 响应式布局 */
@media screen and (min-width: 768px) {
  .product-page {
    .product-grid, 
    .product-grid__skeletons {
      grid-template-columns: repeat(2, 1fr);
      max-width: 1080px;
      margin: 0 auto 20px;
    }
  }
}

/* 安全区适配 */
@supports (padding-top: constant(safe-area-inset-top)) {
  .product-page__container {
    padding-top: calc(16px + constant(safe-area-inset-top));
    padding-bottom: calc(16px + constant(safe-area-inset-bottom));
  }
}

@supports (padding-top: env(safe-area-inset-top)) {
  .product-page__container {
    padding-top: calc(16px + env(safe-area-inset-top));
    padding-bottom: calc(16px + env(safe-area-inset-bottom));
  }
}
===== End of File: pages\product\index.scss =====


===== File: pages\product\index.tsx =====
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { View } from '@tarojs/components';
import Taro, { useDidShow, useShareAppMessage } from '@tarojs/taro';
import { 
  Empty, 
  Toast,
  Popup,
  InfiniteLoading
} from '@nutui/nutui-react-taro';
import ProductCard from 'src/components/ProductCard';
import ProductDetail from 'src/components/ProductDetail';
import { getCoatingList, getCoatingDetail, WaterproofCoating } from 'src/services/api/product/coatingApi';
import './index.scss';

export default function ProductPage() {
  // 状态管理
  const [loading, setLoading] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  const [products, setProducts] = useState<WaterproofCoating[]>([]);
  const [showToast, setShowToast] = useState(false);
  const [toastMsg, setToastMsg] = useState('');
  const [toastType, setToastType] = useState<'success' | 'fail' | 'warn'>('fail');
  const [selectedProduct, setSelectedProduct] = useState<WaterproofCoating | null>(null);
  const [showDetail, setShowDetail] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  
  // 组件挂载状态引用
  const isMounted = React.useRef(true);
  
  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);
  
  // 分享消息配置
  useShareAppMessage(() => {
    return {
      title: '专业防水产品',
      path: '/pages/product/index',
      imageUrl: products.length > 0 ? products[0].images[0] : undefined
    }
  });

  // Toast消息帮助函数
  const showToastMessage = useCallback((message: string, type: 'success' | 'fail' | 'warn' = 'fail') => {
    if (!isMounted.current) return;
    setToastMsg(message);
    setToastType(type);
    setShowToast(true);
  }, []);

  // 获取产品列表
  const fetchProducts = useCallback(async (isRefresh = false) => {
    try {
      const page = isRefresh ? 1 : currentPage;
      
      if (isRefresh) {
        setLoading(true);
      } else {
        setLoadingMore(true);
      }
      
      const response = await getCoatingList({
        page,
        pageSize: 10
      });

      if (!isMounted.current) return;
      
      // 处理成功响应
      if (response.success) {
        const productData = response.data || [];
        
        // 根据刷新标志更新状态
        if (isRefresh) {
          setProducts(productData);
        } else {
          setProducts(prevProducts => [...prevProducts, ...productData]);
        }
        
        // 更新分页状态
        setHasMore(response.hasMore || false);
        if (!isRefresh) {
          setCurrentPage(prev => prev + 1);
        } else {
          setCurrentPage(2);
        }
      } else {
        // 处理错误响应
        showToastMessage(response.error || '获取产品数据失败');
      }
    } catch (error) {
      // 处理异常
      if (!isMounted.current) return;
      console.error('获取产品数据错误', error);
      showToastMessage('获取产品数据失败，请稍后重试');
    } finally {
      // 重置加载状态
      if (!isMounted.current) return;
      setLoading(false);
      setLoadingMore(false);
    }
  }, [currentPage, showToastMessage]);

  // 挂载和刷新时获取产品
  useEffect(() => {
    fetchProducts(true);
  }, [fetchProducts]);

  // 页面显示时检查数据
  useDidShow(() => {
    if (products.length === 0 && !loading) {
      fetchProducts(true);
    }
  });

  // 下拉刷新处理
  useEffect(() => {
    const handlePullDownRefresh = async () => {
      await fetchProducts(true);
      Taro.stopPullDownRefresh();
    };
    
    Taro.eventCenter.on('pullDownRefresh', handlePullDownRefresh);
    return () => {
      Taro.eventCenter.off('pullDownRefresh');
    };
  }, [fetchProducts]);

  // 产品点击处理
  const handleProductClick = useCallback(async (id: number) => {
    try {
      setLoading(true);
      const response = await getCoatingDetail(id);
      
      if (!isMounted.current) return;
      
      if (response.success && response.data) {
        setSelectedProduct(response.data);
        setShowDetail(true);
      } else {
        showToastMessage(response.error || '获取产品详情失败');
      }
    } catch (error) {
      if (!isMounted.current) return;
      console.error('获取产品详情错误', error);
      showToastMessage('获取产品详情失败，请稍后重试');
    } finally {
      if (!isMounted.current) return;
      setLoading(false);
    }
  }, [showToastMessage]);

  // 关闭详情模态框
  const handleCloseDetail = useCallback(() => {
    setShowDetail(false);
    setTimeout(() => {
      setSelectedProduct(null);
    }, 300);
  }, []);

  // 联系按钮处理
  const handleContactClick = useCallback(() => {
    handleCloseDetail();
    Taro.switchTab({ url: '/pages/contact/index' });
  }, [handleCloseDetail]);

  // 加载更多处理
  const handleLoadMore = useCallback(() => {
    if (hasMore && !loading && !loadingMore) {
      return fetchProducts(false);
    }
    return Promise.resolve();
  }, [hasMore, loading, loadingMore, fetchProducts]);

  // 骨架屏UI - 使用记忆化优化性能
  const renderSkeletons = useMemo(() => {
    return (
      <View className="product-grid__skeletons">
        {[1, 2, 3, 4].map(i => (
          <View key={i} className="product-skeleton">
            <View className="product-skeleton__image"></View>
            <View className="product-skeleton__content">
              <View className="product-skeleton__title"></View>
              <View className="product-skeleton__title" style={{ width: '80%' }}></View>
              <View className="product-skeleton__price"></View>
            </View>
          </View>
        ))}
      </View>
    );
  }, []);

  return (
    <View className="product-page">
      {/* 产品列表内容 */}
      <View className="product-page__container">
        {loading && products.length === 0 ? (
          renderSkeletons
        ) : products.length > 0 ? (
          <>
            <View className="product-grid">
              {products.map((product) => (
                <View key={product.id} className="product-grid__item">
                  <ProductCard
                    image={product.images[0]}
                    title={product.title}
                    specifications={product.specifications}
                    onClick={() => handleProductClick(product.id)}
                  />
                </View>
              ))}
            </View>
            
            {/* 无限加载 */}
            <InfiniteLoading
              hasMore={hasMore}
              threshold={100}
              loadingText="加载中..."
              loadMoreText="已经到底啦"
              onLoadMore={handleLoadMore}
            />
          </>
        ) : (
          <View className="product-page__empty">
            <Empty description="暂无相关产品" image="empty" />
          </View>
        )}
      </View>

      {/* 产品详情弹窗 */}
      <Popup
        visible={showDetail}
        position="bottom"
        round
        style={{ height: '92%' }}
        onClose={handleCloseDetail}
        closeable={false}
      >
        {selectedProduct && (
          <ProductDetail 
            product={selectedProduct}
            visible={showDetail}
            onClose={handleCloseDetail}
            onContactClick={handleContactClick}
          />
        )}
      </Popup>

      {/* Toast提示 */}
      <Toast
        msg={toastMsg}
        visible={showToast}
        type={toastType}
        onClose={() => setShowToast(false)}
        duration={2000}
        position="center"
      />
    </View>
  );
}
===== End of File: pages\product\index.tsx =====

