📁 src
  📁 pages
    📁 index
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx
  📁 services
    📁 api
      📁 index
        📄 data.ts
        📄 indexApi.ts
        📄 types.ts
  📁 styles
    📄 theme.css

===== File: pages\index\index.config.ts =====
export default {
  navigationBarTitleText: '郑式修缮',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5',
  backgroundTextStyle: 'dark',
  navigationBarBackgroundColor: '#ffffff',
  navigationBarTextStyle: 'black'
}
===== End of File: pages\index\index.config.ts =====


===== File: pages\index\index.scss =====
/* 防水服务小程序样式 */

// 页面整体样式
.page {
  background-color: #f5f7fa;
  min-height: 100vh;
  padding-bottom: calc(20px + env(safe-area-inset-bottom));
}

// 加载状态
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  
  .loading-text {
    margin-top: 12px;
    color: #666;
    font-size: 14px;
  }
}
===== End of File: pages\index\index.scss =====


===== File: pages\index\index.tsx =====
import { useEffect, useState, useCallback } from 'react'
import { View, Text } from '@tarojs/components'
import { Toast, Loading } from '@nutui/nutui-react-taro'
import Taro from '@tarojs/taro'
import './index.scss'

// 导入组件
import BannerCarousel from 'src/components/BannerCarousel'
import QuickContact from 'src/components/QuickContact'
import ServiceSection from 'src/components/ServiceSection'
import ShowcaseSection from 'src/components/ShowcaseSection'

// 修改API导入路径
import { IndexData } from 'src/services/api/index/types'
import { getIndexData } from 'src/services/api/index/indexApi'

// 简化错误处理函数
const handleIndexError = (err: any): string => {
  return err instanceof Error ? err.message : '获取首页数据时发生未知错误';
};

export default function IndexPage() {
  // 状态管理
  const [loading, setLoading] = useState(true)
  const [indexData, setIndexData] = useState<IndexData | null>(null)
  const [showToast, setShowToast] = useState(false)
  const [toastMsg, setToastMsg] = useState('')
  const [toastType, setToastType] = useState<'success' | 'fail' | 'warn'>('success')
  
  // 显示提示消息
  const showToastMessage = useCallback((message: string, type: 'success' | 'fail' | 'warn' = 'success') => {
    if (showToast) {
      setShowToast(false)
      setTimeout(() => {
        setToastMsg(message)
        setToastType(type)
        setShowToast(true)
      }, 100)
    } else {
      setToastMsg(message)
      setToastType(type)
      setShowToast(true)
    }
  }, [showToast])
  
  // 获取数据
  const fetchData = useCallback(async () => {
    setLoading(true)
    
    try {
      const result = await getIndexData()
      
      if (result.success && result.data) {
        setIndexData(result.data)
      } else {
        showToastMessage(result.error || '获取首页数据失败', 'fail')
      }
    } catch (error) {
      console.error('加载数据失败:', error)
      showToastMessage(handleIndexError(error), 'fail')
    } finally {
      setLoading(false)
    }
  }, [showToastMessage])
  
  // 下拉刷新处理
  const handlePullDownRefresh = useCallback(async () => {
    try {
      const result = await getIndexData()
      
      if (result.success && result.data) {
        setIndexData(result.data)
        showToastMessage('刷新成功', 'success')
      } else {
        showToastMessage(result.error || '刷新数据失败', 'fail')
      }
    } catch (error) {
      showToastMessage(handleIndexError(error), 'fail')
    } finally {
      Taro.stopPullDownRefresh()
    }
  }, [showToastMessage])
  
  // 组件挂载时获取数据
  useEffect(() => {
    fetchData()
  }, [fetchData])
  
  // 下拉刷新事件监听
  useEffect(() => {
    Taro.eventCenter.on('pullDownRefresh', handlePullDownRefresh)
    
    return () => {
      Taro.eventCenter.off('pullDownRefresh', handlePullDownRefresh)
    }
  }, [handlePullDownRefresh])
  
  // 加载状态
  if (loading || !indexData) {
    return (
      <View className='loading-container'>
        <Loading type='spinner' />
        <Text className='loading-text'>加载中...</Text>
      </View>
    )
  }
  
  return (
    <View className='page'>
      {/* Banner区域 */}
      <BannerCarousel banners={indexData.banners} />
      
      {/* 快速联系 */}
      <QuickContact 
        contactInfo={indexData.contactInfo}
        onShowToast={showToastMessage}
      />
      
      {/* 服务项目 */}
      <ServiceSection 
        services={indexData.services}
        title="我们的服务"
      />
      
      {/* 精选案例 */}
      <ShowcaseSection 
        showcases={indexData.showcases}
        onShowToast={showToastMessage}
      />
      
      {/* Toast组件 */}
      <Toast
        msg={toastMsg}
        visible={showToast}
        type={toastType}
        onClose={() => setShowToast(false)}
        duration={2000}
        position='center'
        closeOnOverlayClick
      />
    </View>
  )
}
===== End of File: pages\index\index.tsx =====


===== File: services\api\index\data.ts =====
// services/api/index/data.ts
import { IndexData } from './types';

// 首页模拟数据
export const indexData: IndexData = {
  // 服务数据
  services: [
    {
      id: 1,
      title: '漏水检测',
      description: '专业检测技术，精准定位漏水点'
    },
    {
      id: 2,
      title: '防水施工',
      description: '高标准防水工程，杜绝后顾之忧'
    },
    {
      id: 3,
      title: '渗漏维修',
      description: '快速应对各类渗漏问题，及时修复'
    },
    {
      id: 4,
      title: '材料销售',
      description: '优质防水材料，专业技术支持'
    }
  ],
  
  // 精选案例数据 - 使用新的CaseData结构
  showcases: [
    {
      id: 1,
      title: '城市花园小区屋顶防水工程',
      city: '郑州',
      description: '解决屋顶长期渗水问题，采用最新防水材料，5年质保',
      date: '2024-03-15',
      coverImage: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      images: [
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png'
      ],
      videos: [],
      content: '城市花园小区建于2010年，屋顶长期存在渗水问题，影响居民正常生活。我们使用高分子防水卷材对屋顶进行全面防水处理，并增加了排水系统改造，彻底解决了漏水问题。该工程覆盖面积达2000平方米，工期15天，提供5年质保服务。'
    },
    {
      id: 2,
      title: '滨江豪庭别墅防水工程',
      city: '郑州',
      description: '别墅地下室、游泳池、卫生间整体防水，确保万无一失',
      date: '2024-02-20',
      coverImage: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      images: [
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png'
      ],
      videos: [],
      content: '滨江豪庭别墅是高端住宅项目，业主要求对地下室、游泳池及卫生间进行高标准防水处理。我们采用了双层防水技术，内层使用柔性防水涂料，外层使用自粘防水卷材，并在关键部位增加了防水附加层。整个工程历时25天，防水面积达800平方米，通过了72小时蓄水测试，确保万无一失。'
    },
    {
      id: 3,
      title: '阳光商城外墙防水翻新',
      city: '郑州',
      description: '大型商业综合体外墙防水，美观与实用并重',
      date: '2024-01-10',
      coverImage: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      images: [
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
        'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png'
      ],
      videos: [],
      content: '阳光商城是市中心大型商业综合体，建成已有8年，外墙出现多处渗水和墙面脱落现象。我们对整个外墙进行了清洁、修复和防水处理，采用了新型纳米防水涂料，具有优异的防水性能和耐候性。工程面积达5000平方米，不仅解决了渗水问题，还恢复了建筑外观，使商城焕然一新。'
    }
  ],
  
  // 联系信息 - 支持多个电话号码
  contactInfo: {
    phone: ['17737709908', '13523490435'],
    phoneLabels: ['电话', '备用电话'],
    wechat: 'cszazwp19941114'
  },
  
  // Banner数据
  banners: [
    {
      id: '1',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '郑式修缮',
      subtitle: '专业修缮 · 品质保障'
    },
    {
      id: '2',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '郑式修缮',
      subtitle: '专业修缮 · 品质保障'
    },
    {
      id: '3',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '郑式修缮',
      subtitle: '专业修缮 · 品质保障'
    }
  ]
};
===== End of File: services\api\index\data.ts =====


===== File: services\api\index\indexApi.ts =====
import http from '../../http';
import { IndexData, ApiResponse, Banner, Showcase, Service, ContactInfo } from './types';

// API端点
const ENDPOINTS = {
  GET_BANNERS: '/api/banners/list',
  GET_SHOWCASES: '/api/cases/showcases',
  GET_CONTACT_INFO: '/api/contact/info',
  GET_SERVICES: '/api/contact/services',
};

/**
 * 获取首页所有数据
 */
export const getIndexData = async (): Promise<ApiResponse<IndexData>> => {
  try {
    // 并行请求所有数据
    const [bannersRes, showcasesRes, contactRes, servicesRes] = await Promise.all([
      http.get<Banner[]>(ENDPOINTS.GET_BANNERS),
      http.get<Showcase[]>(ENDPOINTS.GET_SHOWCASES),
      http.get<ContactInfo>(ENDPOINTS.GET_CONTACT_INFO),
      http.get<Service[]>(ENDPOINTS.GET_SERVICES)
    ]);

    // 组装首页数据
    const indexData: IndexData = {
      banners: bannersRes || [],
      showcases: showcasesRes || [],
      contactInfo: contactRes || { phone: [], wechat: '' },
      services: servicesRes || []
    };

    return {
      success: true,
      data: indexData
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || '获取首页数据失败'
    };
  }
};
===== End of File: services\api\index\indexApi.ts =====


===== File: services\api\index\types.ts =====
export interface Service {
    text: string;      // 对应数据库 services.text
    value: string;     // 对应数据库 services.vlaue 转换为字符串
}

// 案例数据接口 
export interface CaseData {
    id: number;
    title: string;
    city: string;
    description: string;
    date: string;
    images: string[];
    videos?: string[];
    content: string;
    coverImage?: string; 
}

// 精选案例接口
export interface Showcase extends CaseData {
    coverImage: string; // 精选案例必须有封面图
}

// 联系信息接口
export interface ContactInfo {
    phone: string[];     // 电话号码数组
    wechat: string;     // 微信号
    address?: string;   // 公司地址
    description?: string; // 公司简介
}

// Banner接口
export interface Banner {
    id: string;
    imageUrl: string;   // 对应数据库 image_url
    title?: string;     // 对应数据库 title
    subtitle?: string;  // 对应数据库 subtitle
}

// 首页数据接口
export interface IndexData {
    services: Service[];
    showcases: Showcase[];
    contactInfo: ContactInfo;
    banners: Banner[];
}

// API响应包装器
export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
}
===== End of File: services\api\index\types.ts =====


===== File: styles\theme.css =====
:root,
page{
  /* 主品牌色系 - 蓝色系列，从浅到深 */
  --nutui-brand-1: #EFF6FF; /* 最浅蓝色 - 适合背景、高亮区域 */
  --nutui-brand-2: #DBEAFE; /* 浅蓝色 - 用于轻量强调和背景 */
  --nutui-brand-3: #BFDBFE; /* 中浅蓝色 - 禁用状态 */
  --nutui-brand-4: #93C5FD; /* 渐变起始色 */
  --nutui-brand-5: #60A5FA; /* 中间过渡色 */
  --nutui-brand-6: #3B82F6; /* 主色调 - 亮蓝色 */
  --nutui-brand-7: #2563EB; /* 按压状态色 - 与TabBar选中色相同 */
  --nutui-brand-8: #1D4ED8; /* 深蓝色 - 渐变结束色 */
  --nutui-brand-9: #1E40AF; /* 很深蓝色 */
  --nutui-brand-10: #1E3A8A; /* 最深蓝色 */
  
  /* 渐变色设置 */
  --nutui-brand-stop-1: #60A5FA; /* 渐变起始色 - 对应brand-5 */
  --nutui-brand-stop-2: #2563EB; /* 渐变结束色 - 对应brand-7，与TabBar一致 */
  
  /* 强调色 - 用于特殊元素，防水主题可以用蓝绿色 */
  --nutui-secondary-1: #0EA5E9; /* 蓝绿色强调色 - 与水相关 */
  
  /* 主色调映射 */
  --nutui-color-primary: #2563EB; /* 与TabBar选中色保持一致 */
  --nutui-color-primary-stop-1: var(--nutui-brand-stop-1);
  --nutui-color-primary-stop-2: var(--nutui-brand-stop-2);
  --nutui-color-primary-pressed: var(--nutui-brand-8);
  --nutui-color-primary-disabled: var(--nutui-brand-3);
  --nutui-color-primary-text: #FFFFFF;
  --nutui-color-primary-light: var(--nutui-brand-2);
  
  /* 文本系统 */
  --nutui-gray-7: #1F2937; /* 主要文本 */
  --nutui-gray-6: #4B5563; /* 重要次要文本 */
  --nutui-gray-5: #6B7280; /* 次要文本 */
  --nutui-gray-4: #9CA3AF; /* 分割线/禁用文本 */
  
  /* 背景系统 */
  --nutui-gray-1: #FFFFFF; /* 白色背景 - 与navigationBar背景一致 */
  --nutui-gray-2: #F9FAFB; /* 浅灰背景 - 卡片内嵌背景 */
  --nutui-gray-3: #F3F4F6; /* 灰色背景 - 页面基底色 */
  
  /* 功能色设置 - 与防水服务主题相协调 */
  --nutui-color-success: #10B981; /* 成功色 - 绿色，代表安全可靠 */
  --nutui-color-success-disabled: #D1FAE5;
  --nutui-color-danger: #EF4444; /* 危险色 - 红色，代表警示 */
  --nutui-color-danger-disabled: #FEE2E2;
  --nutui-color-warning: #F59E0B; /* 警告色 - 橙色 */
  --nutui-color-warning-disabled: #FEF3C7;
  --nutui-color-info: #3B82F6; /* 信息色 - 蓝色，与水相关 */
  --nutui-color-info-disabled: #BFDBFE;
  --nutui-color-info-background: linear-gradient(315deg, #60A5FA 0%, #2563EB 100%);
  
  /* TabBar颜色设置 - 保持一致性 */
  --nutui-tabbar-active-color: #2563EB; /* 与TabBar选中色保持一致 */
  --nutui-tabbar-inactive-color: #999999; /* 与TabBar未选中色保持一致 */

  --nutui-picker-title-ok-font-size: 16px;/*picker面板确认字号*/
  --nutui-picker-item-height: 40px; /*picker面板每一条数据高度*/
  --nutui-picker-list-height: 180px;
  --nutui-picker-title-cancel-font-size: 16px;
}
===== End of File: styles\theme.css =====

