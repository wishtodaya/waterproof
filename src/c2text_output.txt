📁 src
  📄 app.config.ts
  📄 app.scss
  📄 app.ts
  📁 components
    📁 BannerCarousel
      📄 index.scss
      📄 index.tsx
    📁 PageHeader
      📄 index.scss
      📄 index.tsx
    📁 QuickContact
      📄 index.scss
      📄 index.tsx
    📁 ServiceCardCarousel
      📄 index.scss
      📄 index.tsx
    📁 ServiceSection
      📄 index.scss
      📄 index.tsx
    📁 ShowcaseSection
      📄 index.scss
      📄 index.tsx
  📄 index.html
  📁 pages
    📁 cases
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx
    📁 index
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx
  📁 services
    📁 api
      📁 cases
        📄 casesApi.ts
        📄 data.ts
        📄 types.ts
      📁 index
        📄 data.ts
        📄 indexApi.ts
        📄 types.ts
    📁 http
      📄 cache.ts
      📄 config.ts
      📄 errorHandler.ts
      📄 index.ts
      📄 interceptor.ts
      📄 request.ts
      📄 types.ts
  📁 styles
    📄 theme.css

===== File: app.config.ts =====
export default defineAppConfig({
  // 将所有TabBar页面放在主包中
  pages: [
    'pages/index/index',
    'pages/product/index',
    'pages/cases/index',
    'pages/contact/index'
  ],
  window: {
    backgroundTextStyle: 'light',
    navigationBarBackgroundColor: '#FFFFFF',
    navigationBarTitleText: '郑式修缮', // 修改导航标题
    navigationBarTextStyle: 'black'
  },
  // 非TabBar页面可以放在分包中
  subPackages: [],
  tabBar: {
    color: '#757575',
    selectedColor: '#2563EB',
    backgroundColor: '#FFFFFF',
    borderStyle: 'white',
    list: [
      {
        pagePath: 'pages/index/index',
        text: '首页',
        iconPath: 'assets/tab-bar/home.png',
        selectedIconPath: 'assets/tab-bar/home-active.png'
      },
      {
        pagePath: 'pages/product/index',
        text: '产品',
        iconPath: 'assets/tab-bar/service.png',
        selectedIconPath: 'assets/tab-bar/service-active.png'
      },
      {
        pagePath: 'pages/cases/index',
        text: '案例',
        iconPath: 'assets/tab-bar/case.png',
        selectedIconPath: 'assets/tab-bar/case-active.png'
      },
      {
        pagePath: 'pages/contact/index',
        text: '联系我们',
        iconPath: 'assets/tab-bar/contact.png',
        selectedIconPath: 'assets/tab-bar/contact-active.png'
      }
    ]
  },
  lazyCodeLoading: "requiredComponents"
})
===== End of File: app.config.ts =====


===== File: app.scss =====
/* app.scss - 适用于 Taro + NutUI React 多端项目 */

/* 全局基础样式 */
page {
    height: 100%;
    font-size: 16px;
    line-height: 1.5;
    color: var(--nutui-gray-7);
    background-color: var(--nutui-gray-3);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
  }
  
  /* 容器布局 */
  .container {
    padding: 10px;
  }
  
  /* 弹性布局工具 */
  .flex {
    display: flex;
    
    &-center {
      align-items: center;
      justify-content: center;
    }
    
    &-between {
      align-items: center;
      justify-content: space-between;
    }
    
    &-column {
      flex-direction: column;
    }
  }
  
  /* 间距辅助类 - 精简版 */
  .mt-10 { margin-top: 10px; }
  .mr-10 { margin-right: 10px; }
  .mb-10 { margin-bottom: 10px; }
  .ml-10 { margin-left: 10px; }
  .pt-10 { padding-top: 10px; }
  .pr-10 { padding-right: 10px; }
  .pb-10 { padding-bottom: 10px; }
  .pl-10 { padding-left: 10px; }
  
  /* 常用文本样式 */
  .text-primary { color: var(--nutui-color-primary); }
  .text-center { text-align: center; }
  .text-bold { font-weight: bold; }
  
  /* 卡片组件 */
  .card {
    background-color: #fff;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  /* 1px 边框解决方案 */
  .hairline-bottom {
    position: relative;
    
    &::after {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
      height: 1px;
      background-color: var(--nutui-gray-4);
      transform: scaleY(0.5);
    }
  }
  
  /* 安全区适配 */
  .safe-bottom {
    padding-bottom: constant(safe-area-inset-bottom);
    padding-bottom: env(safe-area-inset-bottom);
  }
===== End of File: app.scss =====


===== File: app.ts =====
import  { useEffect } from 'react'
import { useDidShow, useDidHide } from '@tarojs/taro'

// 全局样式
import './styles/theme.css'
import './app.scss'

function App(props) {
  // 可以使用所有的 React Hooks
  useEffect(() => {})

  // 对应 onShow
  useDidShow(() => {})

  // 对应 onHide
  useDidHide(() => {})

  return props.children
}

export default App
===== End of File: app.ts =====


===== File: components\BannerCarousel\index.scss =====
.banner-carousel {
  width: 100%;
  height: 220px;
  overflow: hidden;
  position: relative;
}

.banner-swiper {
  width: 100%;
  height: 100%;
}

.banner-item {
  width: 100%;
  height: 100%;
  position: relative;
}

.banner-image {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}

.banner-content {
  position: absolute;
  z-index: 2;
  left: 0;
  bottom: 0;
  width: 100%;
  padding: 16px 20px;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0));
  text-align: left;
}

.banner-title {
  font-size: 22px;
  font-weight: bold;
  color: #fff;
  margin-bottom: 4px;
  display: block;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
}

.banner-subtitle {
  font-size: 14px;
  color: rgba(255, 255, 255, 0.9);
  display: block;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
}
===== End of File: components\BannerCarousel\index.scss =====


===== File: components\BannerCarousel\index.tsx =====
import { View, Text, Image, Swiper, SwiperItem } from '@tarojs/components'
import { Banner } from 'src/services/api/index/types'
import './index.scss'

interface BannerCarouselProps {
  banners: Banner[];
}

export default function BannerCarousel({ banners }: BannerCarouselProps) {
  return (
    <View className='banner-carousel'>
      <Swiper
        className='banner-swiper'
        indicatorColor='#ddd'
        indicatorActiveColor='#2563EB'
        circular
        indicatorDots
        autoplay
        interval={3500}
      >
        {banners.map(banner => (
          <SwiperItem key={banner.id}>
            <View className='banner-item'>
              <Image 
                className='banner-image' 
                src={banner.imageUrl} 
                mode='aspectFill'
              />
              <View className='banner-content'>
                {banner.title && (
                  <Text className='banner-title'>{banner.title}</Text>
                )}
                
                {banner.subtitle && (
                  <Text className='banner-subtitle'>{banner.subtitle}</Text>
                )}
              </View>
            </View>
          </SwiperItem>
        ))}
      </Swiper>
    </View>
  )
}
===== End of File: components\BannerCarousel\index.tsx =====


===== File: components\PageHeader\index.scss =====
/* components/PageHeader/index.scss */

.unified-header {
  background-color: #fff;
  width: 100%;
  
  /* 搜索区域 */
  .header-search {
    padding: 8px 16px 8px;
  }
  
  /* 自定义搜索栏样式 */
  .custom-searchbar {
    background-color: #f2f2f2;
    height: 34px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    padding: 0 12px;
    transition: all 0.3s ease;
    
    &:focus-within {
      background-color: #e9e9e9;
      box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
    }
  }
  
  .search-icon {
    color: #999;
    font-size: 16px;
    margin-right: 8px;
  }
  
  .search-input {
    flex: 1;
    height: 34px;
    font-size: 14px;
    color: #333;
    border: none;
    background: transparent;
  }
  
  .search-clear {
    color: #999;
    font-size: 16px;
    padding: 4px;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    
    &:active {
      background-color: #e0e0e0;
    }
  }
  
  /* 标签区域 */
  .header-tabs-container {
    position: relative;
    overflow: hidden;
  }
  
  .tabs-container {
    white-space: nowrap;
    
    &::-webkit-scrollbar {
      display: none;
    }
  }
  
  .tabs-list {
    height: 40px;
    padding: 0 8px;
    display: inline-flex;
    position: relative;
    
    &::after {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
      height: 1px;
      background-color: #f0f0f0;
    }
  }
  
  .tab-item {
    font-size: 14px;
    color: #666;
    padding: 0 12px;
    height: 40px;
    line-height: 40px;
    position: relative;
    white-space: nowrap;
    
    &.active {
      color: #333;
      font-weight: 500;
      
      .tab-line {
        opacity: 1;
      }
    }
    
    .tab-line {
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      height: 2px;
      width: 20px;
      background-color: #2563eb;
      border-radius: 1px;
      opacity: 0;
      transition: opacity 0.3s;
    }
  }
}
===== End of File: components\PageHeader\index.scss =====


===== File: components\PageHeader\index.tsx =====
import { useState, useCallback } from 'react';
import { View, Text, Input, ScrollView } from '@tarojs/components';
import './index.scss';

export interface TabItem {
  title: string;
  value: string;
}

interface PageHeaderProps {
  keyword: string;
  onSearch: (value: string) => void;
  searchPlaceholder?: string;
  currentType: string;
  onTypeChange: (value: string) => void;
  tabs: TabItem[];
  debounceTime?: number;
}

export default function PageHeader({
  keyword,
  onSearch,
  searchPlaceholder = '搜索',
  currentType,
  onTypeChange,
  tabs,
  debounceTime = 500
}: PageHeaderProps) {
  const [searchValue, setSearchValue] = useState(keyword);
  const [searchTimer, setSearchTimer] = useState<any>(null);

  // 处理搜索输入变化
  const handleSearch = useCallback(
    (value: string) => {
      setSearchValue(value);
      if (searchTimer) {
        clearTimeout(searchTimer);
      }
      
      const timer = setTimeout(() => {
        onSearch(value);
      }, debounceTime);
      
      setSearchTimer(timer);
    },
    [onSearch, debounceTime, searchTimer]
  );
  
  // 清空搜索
  const handleClear = () => {
    setSearchValue('');
    onSearch('');
  };
  
  // 处理标签切换
  const handleTabChange = (value: string) => {
    onTypeChange(value);
  };

  return (
    <View className="unified-header">
      {/* 搜索区域 */}
      <View className="header-search">
        <View className="custom-searchbar">
          <Text className="search-icon">🔍</Text>
          <Input
            className="search-input"
            value={searchValue}
            placeholder={searchPlaceholder}
            onInput={(e) => handleSearch(e.detail.value)}
            confirmType="search"
            onConfirm={(e) => onSearch(e.detail.value)}
          />
          {searchValue && (
            <Text className="search-clear" onClick={handleClear}>×</Text>
          )}
        </View>
      </View>
      
      {/* 标签区域 - 使用ScrollView但不尝试手动控制滚动 */}
      <View className="header-tabs-container">
        <ScrollView 
          scrollX 
          scrollWithAnimation
          className="tabs-container"
          showScrollbar={false}
        >
          <View className="tabs-list">
            {tabs.map((tab) => (
              <View
                key={tab.value}
                className={`tab-item ${currentType === tab.value ? 'active' : ''}`}
                onClick={() => handleTabChange(tab.value)}
              >
                <Text>{tab.title}</Text>
                <View className="tab-line" />
              </View>
            ))}
          </View>
        </ScrollView>
      </View>
    </View>
  );
}
===== End of File: components\PageHeader\index.tsx =====


===== File: components\QuickContact\index.scss =====
// src/components/QuickContact/index.scss

// 快速联系 - 修改后的样式（更大更醒目的按钮）
.quick-contact {
    display: flex;
    margin: 15px 15px 20px;
    background: #fff;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    position: relative;
    z-index: 10;
    
    .contact-btn {
      flex: 1;
      margin: 0 8px;
      height: 54px;
      font-weight: 600;
      font-size: 16px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
      
      &:active {
        transform: scale(0.98);
        opacity: 0.9;
      }
      
      .btn-icon {
        margin-right: 6px;
        font-size: 20px;
      }
    }
    
    .call-btn {
      background: #1155cc;
      color: #fff;
      box-shadow: 0 2px 6px rgba(17, 85, 204, 0.3);
    }
    
    .wechat-btn {
      background: #09BB07;
      color: #fff;
      box-shadow: 0 2px 6px rgba(9, 187, 7, 0.3);
      
      &.disabled {
        opacity: 0.7;
        background: #71c371;
        box-shadow: none;
      }
    }
  }
  
  // 响应式适配
  @media screen and (max-width: 375px) {
    .quick-contact {
      padding: 12px;
      
      .contact-btn {
        height: 48px;
        font-size: 14px;
      }
    }
  }
===== End of File: components\QuickContact\index.scss =====


===== File: components\QuickContact\index.tsx =====
import { useState } from 'react'
import { View, Text } from '@tarojs/components'
import Taro from '@tarojs/taro'
import './index.scss'

interface ContactInfo {
  phone: string[];
  wechat: string;
}

interface QuickContactProps {
  contactInfo: ContactInfo;
  onShowToast?: (message: string, type: 'success' | 'fail' | 'warn') => void;
}

const QuickContact: React.FC<QuickContactProps> = ({ 
  contactInfo,
  onShowToast
}) => {
  const [isProcessingWechat, setIsProcessingWechat] = useState(false);

  // 电话咨询 - 优先拨打第一个号码
  const handleCall = () => {
    if (!contactInfo?.phone?.length) return;
    
    // 如果有多个号码，可以弹出选择框，这里简化为直接拨打第一个
    const primaryPhone = contactInfo.phone[0];
    
    Taro.makePhoneCall({
      phoneNumber: primaryPhone
    }).catch(err => {
      if (err.errMsg && !err.errMsg.includes('cancel')) {
        onShowToast?.('拨号失败', 'fail');
      }
    });
  };

  // 微信咨询
  const handleWechat = () => {
    if (!contactInfo?.wechat || isProcessingWechat) return;
    
    setIsProcessingWechat(true);
    
    Taro.setClipboardData({
      data: contactInfo.wechat,
      success: function () {
        // 使用系统默认提示
      },
      fail: (err) => {
        if (!err.errMsg?.includes('cancel')) {
          onShowToast?.('复制失败', 'fail');
        }
      },
      complete: () => {
        setTimeout(() => {
          setIsProcessingWechat(false);
        }, 1600);
      }
    });
  };

  return (
    <View className='quick-contact'>
      <View 
        className='contact-btn call-btn'
        onClick={handleCall}
      >
        <Text className='btn-icon'>📞</Text> 电话咨询
      </View>
      <View 
        className={`contact-btn wechat-btn ${isProcessingWechat ? 'disabled' : ''}`}
        onClick={(e) => {
          if (isProcessingWechat) return;
          e?.stopPropagation && e.stopPropagation();
          handleWechat();
        }}
      >
        <Text className='btn-icon'>💬</Text> 微信咨询
      </View>
    </View>
  );
};

export default QuickContact;
===== End of File: components\QuickContact\index.tsx =====


===== File: components\ServiceCardCarousel\index.scss =====
/* 现代风格服务卡片轮播 */
.service-carousel {
  width: 100%;
  margin: 16px 0 24px;
  position: relative;
  overflow: hidden;
  
  // 空状态样式
  &-empty {
    width: 100%;
    height: 180px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #9CA3AF;
    font-size: 14px;
    background-color: #F9FAFB;
    border-radius: 12px;
    box-shadow: 0 8px 16px rgba(17, 24, 39, 0.06);
  }
}

/* 轮播样式 */
.service-swiper {
  width: 100%;
  background-color: transparent;
  overflow: visible;
  padding: 16px 0 30px;
  
  &-item {
    transition: all 0.45s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

/* 服务卡片样式 */
.service-card {
  background-color: #FFFFFF;
  border-radius: 12px;
  padding: 12px 10px;
  box-shadow: 0 8px 16px rgba(17, 24, 39, 0.08);
  display: flex;
  flex-direction: column;
  height: auto;
  min-height: 140px;
  width: 100%;
  margin: 0 auto;
  transition: all 0.35s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
  
  /* 非激活遮罩层 */
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.5);
    opacity: 0;
    transition: opacity 0.35s ease;
    pointer-events: none;
    z-index: 1;
  }
  
  /* 激活样式 */
  &-active {
    transform: scale(1.03);
    box-shadow: 0 12px 28px rgba(17, 24, 39, 0.12);
    
    &::after {
      opacity: 0;
    }
  }
  
  /* 非激活样式 */
  &:not(.service-card-active)::after {
    opacity: 1;
  }
  
  /* 卡片主体 */
  &-main {
    flex: 1;
    display: flex;
    flex-direction: column;
    position: relative;
    z-index: 0;
    text-align: center;
    padding: 0 5px;
  }
}

/* 服务标题 */
.service-title {
  font-size: 24px;
  font-weight: 600;
  color: #1F2937;
  margin-bottom: 6px;
  margin-top: 2px;
  display: block;
  text-align: center;
  position: relative;
  
  &::after {
    content: '';
    display: block;
    width: 40px;
    height: 3px;
    background: linear-gradient(90deg, #60A5FA, #2563EB);
    margin: 6px auto 0;
    border-radius: 2px;
  }
}

/* 服务描述 */
.service-description {
  font-size: 14px;
  color: #6B7280;
  line-height: 1.4;
  margin-bottom: 8px;
  text-align: center;
  padding: 0 5px;
  max-width: 95%;
  margin-left: auto;
  margin-right: auto;
}

/* 服务特点 */
.service-features {
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
  margin-bottom: 0;
  flex-grow: 1;
  justify-content: center;
  align-items: center;
  padding-top: 3px;
  width: 98%;
  margin-left: auto;
  margin-right: auto;
}

/* 特点标签 */
.feature-tag {
  font-size: 12px;
  color: #2563EB;
  background-color: #EFF6FF;
  padding: 3px 8px;
  border-radius: 6px;
  display: inline-block;
  font-weight: 500;
  margin: 2px;
}

/* 指示器容器 */
.swiper-indicators {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 6px 0;
}

/* 指示器点 */
.swiper-indicator {
  width: 8px;
  height: 8px;
  background: #F3F4F6;
  border-radius: 50%;
  margin: 0 4px;
  transition: all 0.3s ease;
  
  /* 激活指示器 */
  &-active {
    width: 20px;
    border-radius: 10px;
    background: #3B82F6;
  }
}

/* 响应式适配 */
@media screen and (max-width: 375px) {
  .service-card {
    padding: 12px 10px;
    min-height: 150px;
  }
  
  .service-title {
    font-size: 20px;
    margin-bottom: 8px;
  }
  
  .service-description {
    font-size: 13px;
    margin-bottom: 8px;
    line-height: 1.4;
  }
  
  .feature-tag {
    font-size: 11px;
    padding: 3px 8px;
    margin: 2px;
  }
  
  .service-features {
    gap: 4px;
  }
}
===== End of File: components\ServiceCardCarousel\index.scss =====


===== File: components\ServiceCardCarousel\index.tsx =====
import { View, Text, Swiper, SwiperItem } from '@tarojs/components'
import { useState, useRef, useEffect } from 'react'
import './index.scss'

// 服务项接口
export interface ServiceItem {
  id: number | string;
  title: string;
  description: string;
  features: string[];
}

interface ServiceCarouselProps {
  services: ServiceItem[];
  onServiceClick?: (service: ServiceItem) => void;
  autoPlay?: boolean;
  interval?: number;
  initialIndex?: number;
  className?: string;
}

const ServiceCarousel: React.FC<ServiceCarouselProps> = ({ 
  services = [],
  onServiceClick, 
  autoPlay = true, 
  interval = 4000,
  initialIndex = 0,
  className = ''
}) => {
  // 当前轮播索引
  const [currentIndex, setCurrentIndex] = useState(initialIndex);
  
  // 容器引用
  const containerRef = useRef<any>(null);
  
  // 边距状态
  const [sideMargin, setSideMargin] = useState('40px');
  
  // 缓存有效的服务列表
  const validServices = services?.filter(item => 
    item && (typeof item.id === 'number' || typeof item.id === 'string')
  ) || [];
  
  // 计算边距 - 基于父容器而非屏幕
  useEffect(() => {
    if (containerRef.current) {
      try {
        // 获取容器宽度
        const containerWidth = containerRef.current.clientWidth;
        // 卡片宽度为容器的85%
        const cardWidth = containerWidth * 0.85;
        // 两侧边距等分剩余空间
        const margin = Math.floor((containerWidth - cardWidth) / 2);
        setSideMargin(`${margin}px`);
      } catch (error) {
        // 异常处理
        console.error('计算边距出错', error);
      }
    }
  }, []);
  
  // 处理轮播切换
  const handleSwipeChange = (e: any) => {
    if (e?.detail?.current != null) {
      setCurrentIndex(e.detail.current);
    }
  };
  
  // 处理服务点击
  const handleServiceClick = (service: ServiceItem) => {
    onServiceClick?.(service);
  };

  // 空数据处理
  if (!validServices.length) {
    return <View className='service-carousel-empty'>暂无服务数据</View>;
  }

  // 计算是否应显示指示器
  const shouldShowIndicator = validServices.length > 1;
  
  // 计算初始索引，确保在有效范围内
  const safeInitialIndex = Math.max(0, Math.min(initialIndex, validServices.length - 1));

  return (
    <View className={`service-carousel ${className}`} ref={containerRef}>
      <Swiper
        className='service-swiper'
        circular={validServices.length > 2}
        autoplay={autoPlay && validServices.length > 1}
        interval={interval}
        previousMargin={sideMargin}
        nextMargin={sideMargin}
        onChange={handleSwipeChange}
        indicatorDots={false}
        current={safeInitialIndex}
      >
        {validServices.map((service, index) => (
          <SwiperItem key={`service-${service.id}`} className='service-swiper-item'>
            <View 
              className={`service-card ${index === currentIndex ? 'service-card-active' : ''}`}
              onClick={() => handleServiceClick(service)}
            >
              <View className='service-card-main'>
                <Text className='service-title'>{service.title || ''}</Text>
                <Text className='service-description'>{service.description || ''}</Text>
                
                <View className='service-features'>
                  {(service.features || []).map((feature, idx) => (
                    <Text key={`feature-${idx}`} className='feature-tag'>{feature}</Text>
                  ))}
                </View>
              </View>
            </View>
          </SwiperItem>
        ))}
      </Swiper>
      
      {/* 自定义指示器 */}
      {shouldShowIndicator && (
        <View className="swiper-indicators">
          {validServices.map((_, index) => (
            <View 
              key={`indicator-${index}`} 
              className={`swiper-indicator ${index === currentIndex ? 'swiper-indicator-active' : ''}`}
            />
          ))}
        </View>
      )}
    </View>
  );
};

export default ServiceCarousel;
===== End of File: components\ServiceCardCarousel\index.tsx =====


===== File: components\ServiceSection\index.scss =====
.service-section-container {
  margin: 20px 15px;
  padding: 18px;
}

.section-header {
  margin-bottom: 15px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.section-title {
  font-size: 16px;
  font-weight: bold;
  color: #333;
  position: relative;
  padding-left: 12px;

  &::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 18px;
    background: linear-gradient(to bottom, #3B82F6, #2563EB);
    border-radius: 4px;
  }
}

.service-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 12px;
}

.service-item {
  background-color: var(--nutui-gray-2);
  border-radius: 8px;
  padding: 12px;
  text-align: left;

  .service-item-title {
    font-size: 15px;
    color: var(--nutui-gray-7);
    margin-bottom: 6px;
    display: block;
  }

  .service-item-description {
    font-size: 13px;
    color: var(--nutui-gray-5);
    line-height: 1.4;
  }
}
===== End of File: components\ServiceSection\index.scss =====


===== File: components\ServiceSection\index.tsx =====
import { View, Text } from '@tarojs/components'
import { Service } from 'src/services/api/index/types'
import './index.scss'

interface ServiceSectionProps {
  services: Service[];
  title?: string;
}

const ServiceSection: React.FC<ServiceSectionProps> = ({ services, title = "我们的服务" }) => {
  if (!services || services.length === 0) {
    return null;
  }

  return (
    <View className='service-section-container card'>
      <View className='section-header'>
        <Text className='section-title'>{title}</Text>
      </View>
      <View className='service-grid'>
        {services.map(service => (
          <View key={service.id} className='service-item'>
            <Text className='service-item-title text-bold'>{service.title}</Text>
            <Text className='service-item-description'>{service.description}</Text>
          </View>
        ))}
      </View>
    </View>
  );
}

export default ServiceSection;
===== End of File: components\ServiceSection\index.tsx =====


===== File: components\ShowcaseSection\index.scss =====
// src/components/ShowcaseSection/index.scss

// 通用板块样式
.section {
    margin: 0 15px 20px;
    background: #fff;
    border-radius: 12px;
    padding: 18px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.06);
  }
  
  .section-header {
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .section-title {
    font-size: 16px;
    font-weight: bold;
    color: #333;
    position: relative;
    padding-left: 12px;
    
    &::before {
      content: '';
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      width: 4px;
      height: 18px;
      background: linear-gradient(to bottom, #3B82F6, #2563EB);
      border-radius: 4px;
    }
  }
  
  // 图片加载和错误状态
  .case-image-loading,
  .case-image-error {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f0f0f0;
    color: #999;
    font-size: 14px;
  }
  
  .case-image-error {
    background-color: #fafafa;
  }
  
  // 案例展示
  .case-container {
    margin-top: 5px;
  }
  
  .case-feature {
    margin-bottom: 15px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    
    &:active {
      transform: translateY(-2px);
      box-shadow: 0 5px 12px rgba(0, 0, 0, 0.12);
    }
    
    .case-image {
      width: 100%;
      height: 160px;
      border-radius: 0;
      
      :global(.nut-image-img) {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    }
    
    .case-content {
      padding: 12px;
      background: #fff;
    }
    
    .case-title {
      font-size: 15px;
      font-weight: bold;
      color: #333;
      margin-bottom: 5px;
      display: block;
    }
    
    .case-description {
      font-size: 13px;
      color: #666;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      line-height: 1.5;
    }
  }
  
  .case-grid {
    display: flex;
    justify-content: space-between;
    
    .case-item {
      width: calc(50% - 5px);
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
      
      &:active {
        transform: translateY(-2px);
        box-shadow: 0 5px 12px rgba(0, 0, 0, 0.12);
      }
      
      .case-image {
        width: 100%;
        height: 90px;
        border-radius: 0;
        
        :global(.nut-image-img) {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }
      
      .case-content {
        padding: 10px;
        background: #fff;
      }
      
      .case-title {
        font-size: 13px;
        color: #333;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
        font-weight: 500;
      }
    }
  }
  
  // 弹窗样式
  .case-detail-popup {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .popup-header {
    padding: 16px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .popup-title {
    font-size: 16px;
    font-weight: bold;
    color: #333;
    flex: 1;
    padding-right: 10px;
  }
  
  .popup-close {
    width: 28px;
    height: 28px;
    font-size: 24px;
    line-height: 24px;
    text-align: center;
    color: #999;
    border-radius: 50%;
    background-color: #f5f5f5;
    
    &:active {
      background-color: #eee;
      color: #666;
    }
  }
  
  .popup-content {
    flex: 1;
    padding: 10px 16px 16px 16px;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }
  
  .case-detail-image {
    width: 100%;
    height: 160px;
    object-fit: cover;
    border-radius: 12px;
    margin-top: 0;
    margin-bottom: 10px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    
    :global(.nut-image-img) {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 12px;
    }
  }
  
  .case-detail-description {
    font-size: 14px;
    font-weight: bold;
    color: #2563EB;
    margin-bottom: 12px;
    display: block;
  }
  
  .case-detail-content {
    font-size: 14px;
    color: #666;
    line-height: 1.6;
    margin-bottom: 20px;
    display: block;
    text-align: justify;
  }
  
  .detail-button {
    margin-top: 20px;
    height: 44px;
    font-size: 15px;
    font-weight: 500;
    border-radius: 8px;
    box-shadow: 0 3px 8px rgba(37, 99, 235, 0.2);
    background: #2563EB;
    color: #fff;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    
    &:active {
      transform: translateY(1px);
      box-shadow: 0 1px 4px rgba(37, 99, 235, 0.2);
      background: #1d4ed8;
    }
  }
===== End of File: components\ShowcaseSection\index.scss =====


===== File: components\ShowcaseSection\index.tsx =====
// src/components/ShowcaseSection/index.tsx
import { useState } from 'react'
import { View, Text } from '@tarojs/components'
import { Image, Popup } from '@nutui/nutui-react-taro'
import Taro from '@tarojs/taro'
import { Showcase } from 'src/services/api/index/indexApi'
import './index.scss'

interface ShowcaseSectionProps {
  showcases: Showcase[];
  title?: string;
  contactPhone?: string;
  onShowToast?: (message: string, type: 'success' | 'fail' | 'warn') => void;
}

const ShowcaseSection: React.FC<ShowcaseSectionProps> = ({
  showcases,
  title = '精选案例',
  contactPhone,
  onShowToast
}) => {
  // 状态管理
  const [showShowcaseDetail, setShowShowcaseDetail] = useState(false);
  const [selectedShowcase, setSelectedShowcase] = useState<Showcase | null>(null);

  // 查看案例详情
  const handleShowcaseClick = (showcase: Showcase) => {
    setSelectedShowcase(showcase);
    setShowShowcaseDetail(true);
  };

  // 电话咨询
  const handleCall = () => {
    if (!contactPhone) return;
    
    Taro.makePhoneCall({
      phoneNumber: contactPhone
    }).catch(err => {
      if (err.errMsg && !err.errMsg.includes('cancel')) {
        onShowToast?.('拨号失败', 'fail');
      }
    });
  };

  if (!showcases?.length) {
    return null;
  }

  return (
    <View className='section showcase-section'>
      <View className='section-header'>
        <Text className='section-title'>{title}</Text>
      </View>
      
      <View className='case-container'>
        {/* 主案例 */}
        <View 
          className='case-feature'
          onClick={() => handleShowcaseClick(showcases[0])}
        >
          <Image 
            src={showcases[0].imageUrl}
            width="100%"
            height="160px"
            className='case-image'
            loading={<View className="case-image-loading"></View>}
            error={<View className="case-image-error"></View>}
          />
          <View className='case-content'>
            <Text className='case-title'>{showcases[0].title}</Text>
            <Text className='case-description'>{showcases[0].description}</Text>
          </View>
        </View>
        
        {/* 次要案例网格 */}
        {showcases.length > 1 && (
          <View className='case-grid'>
            {showcases.slice(1).map(item => (
              <View 
                key={item.id} 
                className='case-item'
                onClick={() => handleShowcaseClick(item)}
              >
                <Image 
                  src={item.imageUrl}
                  width="100%"
                  height="90px"
                  className='case-image'
                  loading={<View className="case-image-loading"></View>}
                  error={<View className="case-image-error"></View>}
                />
                <View className='case-content'>
                  <Text className='case-title'>{item.title}</Text>
                </View>
              </View>
            ))}
          </View>
        )}
      </View>

      {/* 案例详情弹窗 */}
      {selectedShowcase && (
        <Popup
          visible={showShowcaseDetail}
          position="bottom"
          round
          onClose={() => setShowShowcaseDetail(false)}
          style={{ height: '70%' }}
        >
          <View className='case-detail-popup'>
            <View className='popup-header'>
              <Text className='popup-title'>{selectedShowcase.title}</Text>
              <View 
                className='popup-close'
                onClick={() => setShowShowcaseDetail(false)}
              >
                ×
              </View>
            </View>
            <View className='popup-content'>
              <Image 
                src={selectedShowcase.imageUrl}
                width="100%"
                height="160px"
                className='case-detail-image'
                loading={<View className="case-image-loading"></View>}
                error={<View className="case-image-error"></View>}
              />
              <Text className='case-detail-description'>{selectedShowcase.description}</Text>
              <Text className='case-detail-content'>{selectedShowcase.content}</Text>
              {contactPhone && (
                <View 
                  className='detail-button'
                  onClick={handleCall}
                >
                  咨询此方案
                </View>
              )}
            </View>
          </View>
        </Popup>
      )}
    </View>
  );
};

export default ShowcaseSection;
===== End of File: components\ShowcaseSection\index.tsx =====


===== File: index.html =====
<!DOCTYPE html>
<html>
<head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
  <meta content="width=device-width,initial-scale=1,user-scalable=no" name="viewport">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-touch-fullscreen" content="yes">
  <meta name="format-detection" content="telephone=no,address=no">
  <meta name="apple-mobile-web-app-status-bar-style" content="white">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
  <title>waterproof</title>
  <script><%= htmlWebpackPlugin.options.script %></script>
</head>
<body>
  <div id="app"></div>
</body>
</html>
===== End of File: index.html =====


===== File: pages\cases\index.config.ts =====
export default definePageConfig({
  navigationBarTitleText: '案例'
})
===== End of File: pages\cases\index.config.ts =====


===== File: pages\cases\index.scss =====
/* 案例页面样式 */
.cases-page {
  min-height: 100vh;
  background-color: #f7f9fc;
  padding-bottom: env(safe-area-inset-bottom);
  
  /* PageHeader容器 */
  &-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 100;
    background-color: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    margin-top: -1px;
  }

  /* 内容区域 */
  &-content {
    padding: 12px;
    padding-top: 98px;
    padding-bottom: env(safe-area-inset-bottom);
  }

  /* 案例列表 */
  &-list {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 16px;
  }

  /* 案例卡片 */
  &-card {
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
    transition: all 0.3s ease;
    
    &:active {
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(37, 99, 235, 0.15);
    }
    
    &-images {
      width: 100%;
      height: 200px;
      position: relative;
      overflow: hidden;
    }
    
    &-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
      
      &:hover {
        transform: scale(1.05);
      }
    }
    
    &-content {
      padding: 16px 18px;
    }
    
    &-title {
      font-size: 16px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 10px;
      display: -webkit-box;
      -webkit-line-clamp: 1;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    &-description {
      font-size: 14px;
      color: #4B5563;
      margin-bottom: 12px;
      line-height: 1.5;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      height: 42px;
    }
    
    &-date {
      font-size: 13px;
      color: #6B7280;
      display: flex;
      align-items: center;
      
      &::before {
        content: '🕐';
        margin-right: 5px;
      }
    }
  }

  /* 骨架屏样式 */
  &-skeletons {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 16px;
  }

  &-skeleton {
    background-color: #fff;
    padding: 0;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
    overflow: hidden;
    
    &-image {
      width: 100%;
      height: 200px;
      background: linear-gradient(90deg, #f2f5fc 25%, #e6ebf5 50%, #f2f5fc 75%);
      background-size: 400% 100%;
      animation: shimmer 1.5s infinite linear;
    }
    
    &-content {
      padding: 16px 18px;
    }
    
    &-title {
      width: 80%;
      height: 24px;
      background: linear-gradient(90deg, #f2f5fc 25%, #e6ebf5 50%, #f2f5fc 75%);
      background-size: 400% 100%;
      animation: shimmer 1.5s infinite linear;
      border-radius: 4px;
      margin-bottom: 12px;
    }
    
    &-desc {
      width: 100%;
      height: 36px;
      background: linear-gradient(90deg, #f2f5fc 25%, #e6ebf5 50%, #f2f5fc 75%);
      background-size: 400% 100%;
      animation: shimmer 1.5s infinite linear;
      border-radius: 4px;
      margin-bottom: 12px;
    }
    
    &-date {
      width: 120px;
      height: 18px;
      background: linear-gradient(90deg, #f2f5fc 25%, #e6ebf5 50%, #f2f5fc 75%);
      background-size: 400% 100%;
      animation: shimmer 1.5s infinite linear;
      border-radius: 4px;
    }
  }
  
  /* 加载更多样式 */
  .loading-more {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px 0;
    
    .loading-text {
      margin-top: 8px;
      font-size: 12px;
      color: #999;
    }
  }
  
  @keyframes shimmer {
    0% {
      background-position: 100% 0;
    }
    100% {
      background-position: -100% 0;
    }
  }

  /* 案例详情弹窗样式 */
  &-detail {
    height: 100%;
    display: flex;
    flex-direction: column;
    
    &-header {
      padding: 16px 18px;
      border-bottom: 1px solid #f2f2f2;
      flex-shrink: 0;
    }
    
    &-title {
      font-size: 18px;
      font-weight: 600;
      color: #1F2937;
    }
    
    &-scroll {
      flex: 1;
      height: 0 !important;
      -webkit-overflow-scrolling: touch;
    }
    
    &-content {
      padding: 18px;
    }
    
    &-images {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 12px;
      margin-bottom: 16px;
    }
    
    &-image {
      width: 100%;
      height: 130px;
      border-radius: 10px;
      object-fit: cover;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }
    
    /* 视频区域 */
    &-videos {
      margin-bottom: 20px;
    }
    
    &-video {
      width: 100%;
      height: 200px;
      border-radius: 10px;
      margin-bottom: 12px;
      background-color: #000;
    }
    
    &-info {
      padding-bottom: 24px;
    }
    
    &-date {
      font-size: 14px;
      color: #4B5563;
      font-weight: 500;
      padding: 4px 12px;
      background-color: #f5f7fc;
      border-radius: 6px;
      display: inline-flex;
      align-items: center;
      margin-bottom: 18px;
      
      &::before {
        content: '🕐';
        margin-right: 5px;
      }
    }
    
    &-description {
      font-size: 17px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 12px;
    }
    
    &-text {
      font-size: 15px;
      color: #4B5563;
      line-height: 1.6;
      margin-bottom: 24px;
    }
    
    &-button {
      margin-top: 20px;
    }
  }

  /* 动画效果 */
  &-item {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.4s ease-out forwards;
    
    @for $i from 1 through 10 {
      &-#{$i} {
        animation-delay: $i * 0.05s;
      }
    }
  }

  /* 空状态样式 */
  &-empty {
    padding-top: 60px;
    text-align: center;
    height: 60vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  /* 响应式布局 */
  @media screen and (min-width: 576px) {
    &-list {
      grid-template-columns: repeat(2, 1fr);
    }
    
    &-skeletons {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media screen and (min-width: 768px) {
    &-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      padding-top: 108px;
    }
    
    &-list {
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
    }
    
    &-skeletons {
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
    }
  }

  /* 设备适配 */
  @supports (padding-top: constant(safe-area-inset-top)) {
    &-header {
      padding-top: constant(safe-area-inset-top);
    }
    
    &-content {
      padding-top: calc(98px + constant(safe-area-inset-top));
    }
  }

  @supports (padding-top: env(safe-area-inset-top)) {
    &-header {
      padding-top: env(safe-area-inset-top);
    }
    
    &-content {
      padding-top: calc(98px + env(safe-area-inset-top));
    }
  }

  /* 减少动画 */
  @media (prefers-reduced-motion: reduce) {
    &-item {
      animation: none;
      opacity: 1;
      transform: none;
    }
    
    .cases-page-skeleton-image,
    .cases-page-skeleton-title,
    .cases-page-skeleton-desc,
    .cases-page-skeleton-date {
      animation: none;
      background: #f2f2f2;
    }
  }
}

/* 动画关键帧 */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
===== End of File: pages\cases\index.scss =====


===== File: pages\cases\index.tsx =====
// pages/cases/index.tsx
import { useState, useCallback, useEffect, useMemo, useRef } from 'react'
import { View, Text, Image, ScrollView, Video } from '@tarojs/components'
import Taro, { useDidShow, useShareAppMessage } from '@tarojs/taro'
import { 
  Button,
  Empty, 
  InfiniteLoading,
  Popup,
  Toast,
  Loading
} from '@nutui/nutui-react-taro'
import './index.scss'

// Import PageHeader component
import PageHeader from 'src/components/PageHeader';

// Import API and types
import { 
  CaseData, 
  CaseQueryParams 
} from 'src/services/api/cases/types'
import {
  getCases,
  getCaseDetail,
  handleCasesError,
  CITY_TYPES,
  PAGE_SIZE
} from 'src/services/api/cases/casesApi'

export default function CasesPage() {
  // 状态管理
  const [loading, setLoading] = useState(true);
  const [cases, setCases] = useState<CaseData[]>([]);
  const [currentCity, setCurrentCity] = useState<string>('all');
  const [keyword, setKeyword] = useState('');
  const [selectedCase, setSelectedCase] = useState<CaseData | null>(null);
  const [showDetail, setShowDetail] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [showToast, setShowToast] = useState(false);
  const [toastMsg, setToastMsg] = useState('');
  const [toastType, setToastType] = useState<'success' | 'fail' | 'warn'>('fail');

  // Component mount state tracking
  const isMounted = useRef(true);
  
  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);

  // 分享功能
  useShareAppMessage(() => ({
    title: '郑式修缮防水工程案例',
    path: '/pages/cases/index',
    imageUrl: cases.length > 0 ? cases[0].images[0] : undefined,
  }));

  // 显示提示消息
  const showToastMessage = useCallback((message: string, type: 'success' | 'fail' | 'warn' = 'fail') => {
    if (!isMounted.current) return;
    setToastMsg(message);
    setToastType(type);
    setShowToast(true);
  }, []);

  // 加载案例数据
  const loadCases = useCallback(
    async (isRefresh = false) => {
      try {
        const currentPage = isRefresh ? 1 : page;
        
        if (isRefresh) {
          setLoading(true);
        }

        const res = await getCases({
          city: currentCity,
          keyword,
          page: currentPage,
          pageSize: PAGE_SIZE,
        });

        if (!isMounted.current) return;

        if (res.success) {
          const responseData = res.data || [];
          
          if (isRefresh) {
            setCases(responseData);
            setPage(1);
          } else {
            setCases(prev => [...prev, ...responseData]);
            setPage(prev => prev + 1);
          }
          
          setHasMore(res.hasMore || false);
        } else {
          showToastMessage(res.error || '获取案例列表失败');
        }
      } catch (err) {
        if (!isMounted.current) return;
        showToastMessage(handleCasesError(err));
      } finally {
        if (!isMounted.current) return;
        setLoading(false);
      }
    },
    [currentCity, keyword, page, showToastMessage]
  );

  // 城市或关键词变化时加载案例
  useEffect(() => {
    loadCases(true);
  }, [currentCity, keyword]);

  // 页面显示时检查数据
  useDidShow(() => {
    if (cases.length === 0 && !loading) {
      loadCases(true);
    }
  });

  // 处理搜索输入变化
  const handleSearch = useCallback((value: string) => {
    setKeyword(value);
  }, []);

  // 处理城市变化
  const handleCityChange = useCallback((value: string) => {
    setCurrentCity(value);
  }, []);

  // 处理加载更多
  const handleLoadMore = useCallback(() => {
    if (hasMore && !loading) {
      return loadCases(false);
    }
    return Promise.resolve();
  }, [hasMore, loading, loadCases]);

  // 处理案例点击
  const handleCaseClick = useCallback(async (id: number) => {
    try {
      setLoading(true);
      const res = await getCaseDetail(id);
      
      if (!isMounted.current) return;
      
      if (res.success && res.data) {
        setSelectedCase(res.data);
        setShowDetail(true);
      } else {
        showToastMessage(res.error || '获取案例详情失败');
      }
    } catch (err) {
      if (!isMounted.current) return;
      showToastMessage(handleCasesError(err));
    } finally {
      if (!isMounted.current) return;
      setLoading(false);
    }
  }, [showToastMessage]);

  // 处理预约服务
  const handleBook = useCallback(async (data: CaseData) => {
    try {
      await Taro.setStorage({
        key: 'selected_case',
        data,
      });
      showToastMessage('已添加到咨询列表', 'success');
      setTimeout(() => {
        if (isMounted.current) {
          Taro.switchTab({
            url: '/pages/contact/index',
          });
        }
      }, 1500);
    } catch (err) {
      if (!isMounted.current) return;
      showToastMessage(handleCasesError(err));
    }
  }, [showToastMessage]);

  // 骨架屏UI
  const renderSkeletons = useMemo(() => {
    return (
      <View className="cases-page-skeletons">
        {[1, 2, 3].map((i) => (
          <View key={i} className="cases-page-skeleton">
            <View className="cases-page-skeleton-image"></View>
            <View className="cases-page-skeleton-content">
              <View className="cases-page-skeleton-title"></View>
              <View className="cases-page-skeleton-desc"></View>
              <View className="cases-page-skeleton-date"></View>
            </View>
          </View>
        ))}
      </View>
    );
  }, []);

  // 格式化日期字符串
  const formatDate = useCallback((dateString: string) => {
    const date = new Date(dateString);
    return `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日`;
  }, []);

  return (
    <View className="cases-page">
      {/* 使用容器包裹PageHeader */}
      <View className="cases-page-header">
        <PageHeader
          keyword={keyword}
          onSearch={handleSearch}
          searchPlaceholder="搜索城市案例"
          currentType={currentCity}
          onTypeChange={handleCityChange}
          tabs={CITY_TYPES}
        />
      </View>

      {/* 内容 */}
      <View className="cases-page-content">
        {/* 加载骨架屏 */}
        {loading && cases.length === 0 ? (
          renderSkeletons
        ) : cases.length > 0 ? (
          <View className="cases-page-list">
            {cases.map((item, index) => (
              <View key={item.id} className={`cases-page-item cases-page-item-${index + 1}`}>
                <View className="cases-page-card" onClick={() => handleCaseClick(item.id)}>
                  <View className="cases-page-card-images">
                    <Image 
                      src={item.images[0]} 
                      className="cases-page-card-image"
                      mode="aspectFill"
                      lazyLoad
                    />
                  </View>
                  <View className="cases-page-card-content">
                    <View className="cases-page-card-title">{item.title}</View>
                    <View className="cases-page-card-description">{item.description}</View>
                    <View className="cases-page-card-date">施工时间: {formatDate(item.date)}</View>
                  </View>
                </View>
              </View>
            ))}
          </View>
        ) : (
          <View className="cases-page-empty">
            <Empty description="暂无相关案例" image="empty" />
          </View>
        )}

        {/* 无限加载 */}
        {cases.length > 0 && (
          <InfiniteLoading
            hasMore={hasMore}
            threshold={200}
            loadingText="加载中..."
            loadMoreText="已经到底啦"
            onLoadMore={handleLoadMore}
          />
        )}
      </View>

      {/* 案例详情弹窗 */}
      <Popup
        visible={showDetail}
        position="bottom"
        round
        style={{ height: '80%' }}
        onClose={() => setShowDetail(false)}
      >
        {selectedCase && (
          <View className="cases-page-detail">
            {/* 固定高度的头部 */}
            <View className="cases-page-detail-header">
              <View className="cases-page-detail-title">{selectedCase.title}</View>
            </View>
            
            {/* 滚动内容区域 */}
            <ScrollView 
              scrollY
              className="cases-page-detail-scroll"
              enhanced={false}
              showScrollbar={false}
            >
              <View className="cases-page-detail-content">
                <View className="cases-page-detail-images">
                  {selectedCase.images.map((img, idx) => (
                    <Image 
                      key={idx} 
                      src={img} 
                      className="cases-page-detail-image"
                      mode="aspectFill"
                      lazyLoad
                      onClick={() => {
                        Taro.previewImage({
                          current: img,
                          urls: selectedCase.images
                        });
                      }}
                    />
                  ))}
                </View>
                
                {/* 视频区域 */}
                {selectedCase.videos && selectedCase.videos.length > 0 && (
                  <View className="cases-page-detail-videos">
                    {selectedCase.videos.map((video, idx) => (
                      <Video 
                        key={idx}
                        src={video}
                        className="cases-page-detail-video"
                        controls
                        showFullscreenBtn
                        showPlayBtn
                        autoplay={false}
                      />
                    ))}
                  </View>
                )}
                
                <View className="cases-page-detail-info">
                  <View className="cases-page-detail-date">
                    施工时间: {formatDate(selectedCase.date)}
                  </View>
                  <View className="cases-page-detail-description">项目概述</View>
                  <View className="cases-page-detail-text">{selectedCase.content}</View>
                  <Button 
                    type="primary" 
                    block
                    shape="round"
                    className="cases-page-detail-button"
                    onClick={() => handleBook(selectedCase)}
                  >
                    咨询类似方案
                  </Button>
                </View>
              </View>
            </ScrollView>
          </View>
        )}
      </Popup>

      {/* Toast组件 */}
      <Toast
        msg={toastMsg}
        visible={showToast}
        type={toastType}
        onClose={() => setShowToast(false)}
        duration={2000}
        position="center"
        closeOnOverlayClick
      />
    </View>
  );
}
===== End of File: pages\cases\index.tsx =====


===== File: pages\index\index.config.ts =====
export default {
  navigationBarTitleText: '郑式修缮',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5',
  backgroundTextStyle: 'dark',
  navigationBarBackgroundColor: '#ffffff',
  navigationBarTextStyle: 'black'
}
===== End of File: pages\index\index.config.ts =====


===== File: pages\index\index.scss =====
/* 防水服务小程序样式 */

// 页面整体样式
.page {
  background-color: #f5f7fa;
  min-height: 100vh;
  padding-bottom: calc(20px + env(safe-area-inset-bottom));
}

// 加载状态
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  
  .loading-text {
    margin-top: 12px;
    color: #666;
    font-size: 14px;
  }
}
===== End of File: pages\index\index.scss =====


===== File: pages\index\index.tsx =====
// pages/index/index.tsx
import { useEffect, useState } from 'react'
import { View, Text } from '@tarojs/components'
import { Toast, Loading } from '@nutui/nutui-react-taro'
import Taro from '@tarojs/taro'
import './index.scss'

// 导入组件
import BannerCarousel from 'src/components/BannerCarousel'
import QuickContact from 'src/components/QuickContact'
import ServiceSection from 'src/components/ServiceSection'
import ShowcaseSection from 'src/components/ShowcaseSection'

// 直接导入API和类型
import { IndexData } from 'src/services/api/index/types'
import { getIndexData, handleIndexError } from 'src/services/api/index/indexApi'

export default function IndexPage() {
  // 状态管理
  const [loading, setLoading] = useState(true)
  const [indexData, setIndexData] = useState<IndexData | null>(null)
  const [showToast, setShowToast] = useState(false)
  const [toastMsg, setToastMsg] = useState('')
  const [toastType, setToastType] = useState<'success' | 'fail' | 'warn'>('success')
  
  // 显示提示消息
  const showToastMessage = (message: string, type: 'success' | 'fail' | 'warn' = 'success') => {
    if (showToast) {
      setShowToast(false)
      setTimeout(() => {
        setToastMsg(message)
        setToastType(type)
        setShowToast(true)
      }, 100)
    } else {
      setToastMsg(message)
      setToastType(type)
      setShowToast(true)
    }
  }
  
  // 获取数据
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      
      try {
        // 获取所有首页数据
        const result = await getIndexData()
        
        if (result.success && result.data) {
          setIndexData(result.data)
        } else {
          showToastMessage(result.error || '获取首页数据失败', 'fail')
        }
      } catch (error) {
        console.error('加载数据失败:', error)
        showToastMessage(handleIndexError(error), 'fail')
      } finally {
        setLoading(false)
      }
    }
    
    fetchData()
  }, [])
  
  // 下拉刷新处理
  useEffect(() => {
    Taro.eventCenter.on('pullDownRefresh', async () => {
      try {
        // 刷新首页数据
        const result = await getIndexData()
        
        if (result.success && result.data) {
          setIndexData(result.data)
          showToastMessage('刷新成功', 'success')
        } else {
          showToastMessage(result.error || '刷新数据失败', 'fail')
        }
      } catch (error) {
        showToastMessage(handleIndexError(error), 'fail')
      } finally {
        Taro.stopPullDownRefresh()
      }
    })
    
    return () => {
      Taro.eventCenter.off('pullDownRefresh')
    }
  }, [])
  
  // 加载状态
  if (loading || !indexData) {
    return (
      <View className='loading-container'>
        <Loading type='spinner' />
        <Text className='loading-text'>加载中...</Text>
      </View>
    )
  }
  
  return (
    <View className='page'>
      {/* Banner区域 */}
      <BannerCarousel banners={indexData.banners} />
      
      {/* 快速联系 */}
      <QuickContact 
        contactInfo={indexData.contactInfo}
        onShowToast={showToastMessage}
      />
      
      {/* 服务分类 */}
      <ServiceSection services={indexData.services} />
      
      {/* 精选案例 */}
      <ShowcaseSection 
        showcases={indexData.showcases}
        contactPhone={indexData.contactInfo.phone}
        onShowToast={showToastMessage}
      />
      
      {/* Toast组件 */}
      <Toast
        msg={toastMsg}
        visible={showToast}
        type={toastType}
        onClose={() => setShowToast(false)}
        duration={2000}
        position='center'
        closeOnOverlayClick
      />
    </View>
  )
}
===== End of File: pages\index\index.tsx =====


===== File: services\api\cases\casesApi.ts =====
// services/api/cases/casesApi.ts
import { CaseData, CaseQueryParams, CaseApiResponse, CasesApiResponse } from './types';
import { mockCases, PAGE_SIZE, CITY_TYPES } from './data';

// API端点
const ENDPOINTS = {
  GET_CASES: '/cases',
  GET_CASE_DETAIL: '/cases/:id',
};

/**
 * 获取案例列表
 */
export const getCases = async ({
  city,
  keyword,
  page,
  pageSize
}: CaseQueryParams): Promise<CasesApiResponse> => {
  try {
    // 模拟API调用延迟
    await new Promise(resolve => setTimeout(resolve, 800));
    
    // 过滤模拟数据
    let filteredData = mockCases.filter(item => {
      if (city !== 'all' && item.city !== city) return false;
      if (keyword && !item.title.includes(keyword) && !item.description.includes(keyword) && !item.city.includes(keyword)) return false;
      return true;
    });
    
    // 分页
    const startIndex = (page - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const paginatedData = filteredData.slice(startIndex, endIndex);
    
    // 判断是否还有更多数据
    const hasMore = endIndex < filteredData.length;
    
    return {
      success: true,
      data: paginatedData,
      hasMore
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || '获取案例列表失败',
      data: []
    };
  }
};

/**
 * 根据ID获取案例详情
 */
export const getCaseDetail = async (id: number): Promise<CaseApiResponse<CaseData>> => {
  try {
    // 模拟API调用延迟
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // 查找案例
    const caseItem = mockCases.find(item => item.id === id);
    
    if (caseItem) {
      return {
        success: true,
        data: caseItem
      };
    } else {
      throw new Error('案例不存在');
    }
  } catch (error: any) {
    return {
      success: false,
      error: error.message || '获取案例详情失败'
    };
  }
};

/**
 * 错误处理工具
 */
export const handleCasesError = (err: any): string => {
  console.error(err);
  return err instanceof Error ? err.message : '发生未知错误';
};

// 直接导出常量
export { mockCases, PAGE_SIZE, CITY_TYPES };

// 导出类型
export * from './types';
export * from './data';
===== End of File: services\api\cases\casesApi.ts =====


===== File: services\api\cases\data.ts =====
// services/api/cases/data.ts

import { CaseData } from './types';

// 城市列表常量
export const CITY_TYPES = [
  { title: '全部城市', value: 'all' },
  { title: '北京', value: '北京' },
  { title: '上海', value: '上海' },
  { title: '广州', value: '广州' },
  { title: '深圳', value: '深圳' },
  { title: '成都', value: '成都' },
  { title: '杭州', value: '杭州' },
  { title: '郑州', value: '郑州' },

];

// 分页大小常量
export const PAGE_SIZE = 10;

// 模拟数据
export const mockCases: CaseData[] = [
  {
    id: 1,
    title: '海珠区某小区地下车库防水工程',
    city: '广州',
    description: '为小区地下车库进行全面防水处理，解决了长期渗水问题，确保车库环境干燥安全。',
    date: '2024-08-15',
    images: [
      'https://storage.360buyimg.com/jdc-article/NutUItaro34.jpg',
      'https://storage.360buyimg.com/jdc-article/NutUItaro2.jpg'
    ],
    videos: [
      'https://example.com/video1.mp4'
    ],
    content: '该小区地下车库建于2010年，由于防水层老化，导致雨季经常出现渗水现象，影响车辆停放和居民出行。我们采用了双层防水解决方案，使用高弹性防水涂料结合防水卷材，完全解决了渗漏问题。同时，我们也优化了排水系统，提高了排水效率。本项目覆盖面积达2000平方米，工期30天，业主反馈非常满意。'
  },
  {
    id: 2,
    title: '浦东新区高层建筑外墙防水项目',
    city: '上海',
    description: '为高层建筑外墙进行防水处理，有效解决了雨天渗水问题，保护建筑结构。',
    date: '2024-07-20',
    images: [
      'https://storage.360buyimg.com/jdc-article/welcomenutui.jpg',
      'https://storage.360buyimg.com/jdc-article/welcomenutui.jpg'
    ],
    content: '该高层建筑外墙在强降雨天气条件下，多处出现渗漏，影响室内使用及建筑寿命。我们对整个外墙进行了全面检测，找出所有渗漏点，采用纳米防水材料进行修复和防护。工程历时45天，面积达3500平方米，目前已度过多次暴雨考验，防水效果良好。'
  },
  {
    id: 3,
    title: '朝阳区别墅屋顶防水工程',
    city: '北京',
    description: '为高档别墅区进行屋顶防水施工，确保防水效果长达15年以上。',
    date: '2024-09-05',
    images: [
      'https://storage.360buyimg.com/jdc-article/NutUItaro2.jpg',
      'https://storage.360buyimg.com/jdc-article/welcomenutui.jpg'
    ],
    videos: [
      'https://example.com/video2.mp4',
      'https://example.com/video3.mp4'
    ],
    content: '别墅区共有5栋独栋别墅，均为坡屋顶设计，原有防水层使用期已超过10年，多处出现老化和破损。我们采用了进口防水材料，对屋顶进行全面翻新，并优化了屋顶排水系统。本工程工期15天，覆盖总面积300平方米，防水质保15年，彻底解决了屋顶漏水的困扰。'
  },
  {
    id: 4,
    title: '福田区商场卫生间防水整体解决方案',
    city: '深圳',
    description: '为大型商场提供卫生间防水整体解决方案，从根源解决漏水问题。',
    date: '2024-06-10',
    images: [
      'https://storage.360buyimg.com/jdc-article/NutUItaro34.jpg',
      'https://storage.360buyimg.com/jdc-article/NutUItaro2.jpg'
    ],
    content: '该商场卫生间长期存在渗漏问题，影响了下层商铺的正常经营。我们采用了防水整体解决方案，包括拆除原有地砖和墙砖，铺设高品质防水材料，重新安装管道和洁具，确保防水效果。整个工程历时20天，所有卫生间恢复使用后再无渗漏现象发生。'
  },
  {
    id: 5,
    title: '武侯区学校操场看台防水工程',
    city: '成都',
    description: '为学校操场看台进行防水处理，确保学生活动安全。',
    date: '2024-05-18',
    images: [
      'https://storage.360buyimg.com/jdc-article/welcomenutui.jpg',
      'https://storage.360buyimg.com/jdc-article/NutUItaro34.jpg'
    ],
    content: '学校操场看台下方空间被用作器材室，原有防水措施老化导致雨水渗漏，影响器材存放。我们对看台表面进行了全面防水处理，采用耐磨防水材料，确保防水效果的同时增加了防滑功能，提高学生活动安全性。工程面积1200平方米，历时25天完成，目前已经过多次雨季考验，效果良好。'
  },
  {
    id: 6,
    title: '西湖区医院地下室防水工程',
    city: '杭州',
    description: '为医院地下室提供专业防水解决方案，保障医疗设备安全运行。',
    date: '2024-04-30',
    images: [
      'https://storage.360buyimg.com/jdc-article/NutUItaro2.jpg',
      'https://storage.360buyimg.com/jdc-article/welcomenutui.jpg'
    ],
    videos: [
      'https://example.com/video4.mp4'
    ],
    content: '医院地下室存放了大量重要医疗设备和药品，对防水要求极高。我们采用了最先进的防水技术和材料，对整个地下室进行了全面防水处理。工程覆盖面积1800平方米，历时35天，采用了三层防护措施，确保即使在极端天气条件下也不会出现渗漏现象。'
  },
  {
    id: 7,
    title: '正大一附院医院地下室防水工程',
    city: '郑州',
    description: '为医院地下室提供专业防水解决方案，保障医疗设备安全运行。',
    date: '2024-04-30',
    images: [
      'https://storage.360buyimg.com/jdc-article/NutUItaro2.jpg',
      'https://storage.360buyimg.com/jdc-article/welcomenutui.jpg'
    ],
    videos: [
      'https://example.com/video4.mp4'
    ],
    content: '医院地下室存放了大量重要医疗设备和药品，对防水要求极高。我们采用了最先进的防水技术和材料，对整个地下室进行了全面防水处理。工程覆盖面积1800平方米，历时35天，采用了三层防护措施，确保即使在极端天气条件下也不会出现渗漏现象。'
  }
];
===== End of File: services\api\cases\data.ts =====


===== File: services\api\cases\types.ts =====
// services/api/cases/types.ts

// 案例数据接口
export interface CaseData {
  id: number;
  title: string;
  city: string; // 城市，替代原来的type
  description: string;
  date: string; // 施工时间
  images: string[];
  videos?: string[]; // 视频列表（可选）
  content: string;
}

// 案例查询参数
export interface CaseQueryParams {
  city: string; // 城市筛选，替代原来的type
  keyword: string;
  page: number;
  pageSize: number;
}

// 案例API响应基础接口
export interface CaseApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

// 案例列表API响应
export interface CasesApiResponse extends CaseApiResponse<CaseData[]> {
  hasMore?: boolean;
}
===== End of File: services\api\cases\types.ts =====


===== File: services\api\index\data.ts =====
// services/api/index/data.ts
import { IndexData } from './types';

// 首页模拟数据
export const indexData: IndexData = {
  // 服务数据 - 修改为新的四项服务
  services: [
    {
      id: 1,
      title: '漏水检测',
      description: '专业检测技术，精准定位漏水点'
    },
    {
      id: 2,
      title: '防水施工',
      description: '高标准防水工程，杜绝后顾之忧'
    },
    {
      id: 3,
      title: '渗漏维修',
      description: '快速应对各类渗漏问题，及时修复'
    },
    {
      id: 4,
      title: '材料销售',
      description: '优质防水材料，专业技术支持'
    }
  ],
  
  // 精选案例数据
  showcases: [
    {
      id: '1',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '城市花园小区屋顶防水工程',
      description: '解决屋顶长期渗水问题，采用最新防水材料，5年质保',
      content: '城市花园小区建于2010年，屋顶长期存在渗水问题，影响居民正常生活。我们使用高分子防水卷材对屋顶进行全面防水处理，并增加了排水系统改造，彻底解决了漏水问题。该工程覆盖面积达2000平方米，工期15天，提供5年质保服务。'
    },
    {
      id: '2',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '滨江豪庭别墅防水工程',
      description: '别墅地下室、游泳池、卫生间整体防水，确保万无一失',
      content: '滨江豪庭别墅是高端住宅项目，业主要求对地下室、游泳池及卫生间进行高标准防水处理。我们采用了双层防水技术，内层使用柔性防水涂料，外层使用自粘防水卷材，并在关键部位增加了防水附加层。整个工程历时25天，防水面积达800平方米，通过了72小时蓄水测试，确保万无一失。'
    },
    {
      id: '3',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '阳光商城外墙防水翻新',
      description: '大型商业综合体外墙防水，美观与实用并重',
      content: '阳光商城是市中心大型商业综合体，建成已有8年，外墙出现多处渗水和墙面脱落现象。我们对整个外墙进行了清洁、修复和防水处理，采用了新型纳米防水涂料，具有优异的防水性能和耐候性。工程面积达5000平方米，不仅解决了渗水问题，还恢复了建筑外观，使商城焕然一新。'
    }
  ],
  
  // 联系信息
  contactInfo: {
    phone: '17737709908',
    wechat: 'cszazwp19941114'
  },
  
  // Banner数据 - 修改标题
  banners: [
    {
      id: '1',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '郑式修缮',
      subtitle: '专业修缮 · 品质保障'
    },
    {
      id: '2',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '郑式修缮',
      subtitle: '专业修缮 · 品质保障'
    },
    {
      id: '3',
      imageUrl: 'https://img.picui.cn/free/2025/05/23/6830406aa07e5.png',
      title: '郑式修缮',
      subtitle: '专业修缮 · 品质保障'
    }
  ]
};
===== End of File: services\api\index\data.ts =====


===== File: services\api\index\indexApi.ts =====
// services/api/index/indexApi.ts
import http from '../../http';
import { IndexData, ApiResponse } from './types';
import { indexData } from './data';

// API端点
const ENDPOINTS = {
  GET_INDEX_DATA: '/index',
};

/**
 * 获取首页所有数据
 */
export const getIndexData = async (): Promise<ApiResponse<IndexData>> => {
  try {
    // 替换为实际API调用当后端准备好时
    // const data = await http.get<IndexData>(ENDPOINTS.GET_INDEX_DATA);
    
    // 模拟API调用延迟
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // 返回模拟数据
    return {
      success: true,
      data: indexData
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || '获取首页数据失败'
    };
  }
};

/**
 * 首页模块错误处理工具
 */
export const handleIndexError = (err: any): string => {
  console.error('Index API Error:', err);
  return err instanceof Error ? err.message : '获取首页数据时发生未知错误';
};

// 导出类型和数据
export * from './types';
export * from './data';
===== End of File: services\api\index\indexApi.ts =====


===== File: services\api\index\types.ts =====
// services/index/api/types.ts

// 服务项接口 - 删除features属性
export interface Service {
    id: number | string;
    title: string;
    description: string;
}
  
// 精选案例接口
export interface Showcase {
    id: string;
    imageUrl: string;
    title: string;
    description: string;
    content: string;
}
  
// 联系信息接口
export interface ContactInfo {
    phone: string;
    wechat: string;
}
  
// Banner接口
export interface Banner {
    id: string;
    imageUrl: string;
    title?: string;
    subtitle?: string;
}
  
// 首页数据接口
export interface IndexData {
    services: Service[];
    showcases: Showcase[];
    contactInfo: ContactInfo;
    banners: Banner[];
}
  
// API响应包装器
export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
}
===== End of File: services\api\index\types.ts =====


===== File: services\http\cache.ts =====
import Taro from '@tarojs/taro';
import type { CacheData } from './types';

// 缓存键前缀
const CACHE_PREFIX = 'http_cache_';

/**
 * 生成缓存键
 */
export function generateCacheKey(url: string, data?: any): string {
  return `${CACHE_PREFIX}${url}_${JSON.stringify(data || {})}`;
}

/**
 * 获取缓存数据
 */
export function getCacheData<T>(key: string): CacheData<T> | null {
  try {
    const cacheData = Taro.getStorageSync(key);
    return cacheData ? JSON.parse(cacheData) : null;
  } catch (error) {
    console.error('获取缓存数据失败', error);
    return null;
  }
}

/**
 * 设置缓存数据
 */
export function setCacheData<T>(key: string, data: T): void {
    try {
      const cacheData: CacheData<T> = {
        data,
        timestamp: Date.now()
      };
      
      Taro.setStorageSync(key, JSON.stringify(cacheData));
    } catch (error) {
      console.error('设置缓存数据失败', error);
    }
  }

/**
 * 清除缓存数据
 */
export function clearCacheData(key: string): void {
  try {
    Taro.removeStorageSync(key);
  } catch (error) {
    console.error('清除缓存数据失败', error);
  }
}

/**
 * 清除所有HTTP缓存
 */
export function clearAllCache(): void {
  try {
    const storageInfo = Taro.getStorageInfoSync();
    const keys = storageInfo.keys || [];
    
    keys.forEach(key => {
      if (key.startsWith(CACHE_PREFIX)) {
        Taro.removeStorageSync(key);
      }
    });
  } catch (error) {
    console.error('清除所有缓存失败', error);
  }
}

/**
 * 检查缓存是否有效
 */
export function isCacheValid<T>(cache: CacheData<T>, cacheTime: number): boolean {
  if (!cache || !cache.timestamp) return false;
  
  return Date.now() - cache.timestamp < cacheTime;
}
===== End of File: services\http\cache.ts =====


===== File: services\http\config.ts =====
import type { RequestConfig } from './types';

// API基础URL
export const API_BASE_URL = {
  // 开发环境
  development: 'https://dev-api.example.com/v1',
  // 生产环境
  production: 'https://api.example.com/v1'
};

// 环境判断
export const ENV = process.env.NODE_ENV || 'development';

// HTTP状态码
export const HTTP_STATUS = {
  SUCCESS: 200,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  SERVER_ERROR: 500
};

// 业务状态码
export const BUSINESS_CODE = {
  SUCCESS: 0,           // 成功
  TOKEN_EXPIRED: 10001, // token过期
  PARAM_ERROR: 10002,   // 参数错误
  SERVER_ERROR: 50000   // 服务器错误
};

// 默认请求配置
export const DEFAULT_CONFIG: RequestConfig = {
  baseURL: API_BASE_URL[ENV],
  showLoading: true,
  loadingText: '加载中',
  showErrorToast: true,
  headers: {
    'Content-Type': 'application/json'
  },
  timeout: 10000,       // 10秒
  useCache: false,
  cacheTime: 5 * 60 * 1000,  // 5分钟
  retry: 0,
  retryDelay: 1000,
  withToken: true
};
===== End of File: services\http\config.ts =====


===== File: services\http\errorHandler.ts =====
import Taro from '@tarojs/taro';
import { HTTP_STATUS, BUSINESS_CODE } from './config';
import type { RequestError, RequestOptions } from './types';

/**
 * 处理HTTP状态错误
 */
export function handleHttpError(statusCode: number): RequestError {
  let message = '未知错误';
  
  switch (statusCode) {
    case HTTP_STATUS.BAD_REQUEST:
      message = '请求参数错误';
      break;
    case HTTP_STATUS.UNAUTHORIZED:
      message = '未授权，请登录';
      break;
    case HTTP_STATUS.FORBIDDEN:
      message = '没有权限访问';
      break;
    case HTTP_STATUS.NOT_FOUND:
      message = '请求资源不存在';
      break;
    case HTTP_STATUS.SERVER_ERROR:
      message = '服务器内部错误';
      break;
    default:
      message = `HTTP错误 (${statusCode})`;
  }
  
  return {
    code: statusCode,
    message
  };
}

/**
 * 处理业务状态错误
 */
export function handleBusinessError<T>(response: { code: number; message: string; data?: T }): RequestError {
  let message = response.message || '未知错误';
  
  switch (response.code) {
    case BUSINESS_CODE.TOKEN_EXPIRED:
      message = '登录已过期，请重新登录';
      break;
    case BUSINESS_CODE.PARAM_ERROR:
      message = '参数错误';
      break;
    case BUSINESS_CODE.SERVER_ERROR:
      message = '服务器内部错误';
      break;
  }
  
  return {
    code: response.code,
    message,
    data: response.data
  };
}

/**
 * 处理网络错误
 */
export function handleNetworkError(error: any): RequestError {
  let message = '网络异常';
  
  if (error?.errMsg) {
    if (error.errMsg.includes('timeout')) {
      message = '请求超时，请检查网络';
    } else if (error.errMsg.includes('fail')) {
      message = '网络连接失败，请检查网络设置';
    }
  }
  
  return {
    code: -1,
    message
  };
}

/**
 * 综合错误处理
 */
export function handleRequestError(error: any, options: RequestOptions): RequestError {
  // 已格式化的错误
  if (error && typeof error === 'object' && 'code' in error && 'message' in error) {
    if (options.showErrorToast) {
      Taro.showToast({
        title: error.message,
        icon: 'none',
        duration: 2000
      });
    }
    
    return error as RequestError;
  }
  
  // HTTP错误
  if (error && typeof error === 'object' && 'statusCode' in error) {
    const httpError = handleHttpError(error.statusCode);
    
    if (options.showErrorToast) {
      Taro.showToast({
        title: httpError.message,
        icon: 'none',
        duration: 2000
      });
    }
    
    return httpError;
  }
  
  // 网络错误
  if (error && typeof error === 'object' && 'errMsg' in error) {
    const networkError = handleNetworkError(error);
    
    if (options.showErrorToast) {
      Taro.showToast({
        title: networkError.message,
        icon: 'none',
        duration: 2000
      });
    }
    
    return networkError;
  }
  
  // 其他错误
  const unknownError: RequestError = {
    code: -1,
    message: typeof error === 'string' ? error : '未知错误'
  };
  
  if (options.showErrorToast) {
    Taro.showToast({
      title: unknownError.message,
      icon: 'none',
      duration: 2000
    });
  }
  
  return unknownError;
}
===== End of File: services\http\errorHandler.ts =====


===== File: services\http\index.ts =====
import { request } from './request';
import type { RequestOptions} from './types';
import { addRequestInterceptor, addResponseInterceptor, addErrorInterceptor } from './interceptor';
import { clearAllCache, clearCacheData } from './cache';

/**
 * HTTP客户端
 */
const http = {
  /**
   * 发送GET请求
   */
  get: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'GET', data, ...options }),
  
  /**
   * 发送POST请求
   */  
  post: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'POST', data, ...options }),
  
  /**
   * 发送PUT请求
   */
  put: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'PUT', data, ...options }),
  
  /**
   * 发送DELETE请求
   */
  delete: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'DELETE', data, ...options }),
  
  /**
   * 原始请求方法
   */
  request,
  
  /**
   * 清除指定缓存
   */
  clearCache: clearCacheData,
  
  /**
   * 清除所有缓存
   */
  clearAllCache,
  
  /**
   * 添加请求拦截器
   */
  addRequestInterceptor,
  
  /**
   * 添加响应拦截器
   */
  addResponseInterceptor,
  
  /**
   * 添加错误拦截器
   */
  addErrorInterceptor
};

export default http;

// 导出类型
export * from './types';
export { DEFAULT_CONFIG } from './config';
===== End of File: services\http\index.ts =====


===== File: services\http\interceptor.ts =====
import Taro from '@tarojs/taro';
import type { RequestInterceptor, ResponseInterceptor, ErrorInterceptor, RequestOptions, ResponseData } from './types';
import { BUSINESS_CODE } from './config';

// 请求拦截器数组
const requestInterceptors: RequestInterceptor[] = [];

// 响应拦截器数组
const responseInterceptors: ResponseInterceptor[] = [];

// 错误拦截器数组
const errorInterceptors: ErrorInterceptor[] = [];

/**
 * 添加请求拦截器
 */
export function addRequestInterceptor(interceptor: RequestInterceptor): void {
  requestInterceptors.push(interceptor);
}

/**
 * 添加响应拦截器
 */
export function addResponseInterceptor(interceptor: ResponseInterceptor): void {
  responseInterceptors.push(interceptor);
}

/**
 * 添加错误拦截器
 */
export function addErrorInterceptor(interceptor: ErrorInterceptor): void {
  errorInterceptors.push(interceptor);
}

/**
 * 应用请求拦截器
 */
export async function applyRequestInterceptors(options: RequestOptions): Promise<RequestOptions> {
  let config = { ...options };
  
  for (const interceptor of requestInterceptors) {
    config = await interceptor(config);
  }
  
  return config;
}

/**
 * 应用响应拦截器
 */
export async function applyResponseInterceptors<T>(response: ResponseData<T>, options: RequestOptions): Promise<ResponseData<T>> {
  let result = { ...response };
  
  for (const interceptor of responseInterceptors) {
    result = await interceptor(result, options);
  }
  
  return result;
}

/**
 * 应用错误拦截器
 */
export async function applyErrorInterceptors(error: any, options: RequestOptions): Promise<any> {
  let result = error;
  
  for (const interceptor of errorInterceptors) {
    result = await interceptor(result, options);
  }
  
  return result;
}

// 添加默认Token拦截器
addRequestInterceptor(async (options) => {
  if (options.withToken) {
    try {
      const token = Taro.getStorageSync('token');
      if (token) {
        options.headers = {
          ...options.headers,
          'Authorization': `Bearer ${token}`
        };
      }
    } catch (error) {
      console.error('获取Token失败', error);
    }
  }
  
  return options;
});

// 添加默认日志拦截器
if (process.env.NODE_ENV === 'development') {
  // 请求日志
  addRequestInterceptor((options) => {
    console.log(`[Request] ${options.method} ${options.url}`, options.data);
    return options;
  });
  
  // 响应日志
  addResponseInterceptor((response, options) => {
    console.log(`[Response] ${options.method} ${options.url}`, response);
    return response;
  });
  
  // 错误日志
  addErrorInterceptor((error, options) => {
    console.error(`[Error] ${options.method} ${options.url}`, error);
    return error;
  });
}

// 添加默认Token过期处理
addErrorInterceptor((error) => {
  if (error && error.code === BUSINESS_CODE.TOKEN_EXPIRED) {
    // 清除本地Token
    Taro.removeStorageSync('token');
    
    // 跳转到登录页
    Taro.navigateTo({
      url: '/pages/login/index'
    });
  }
  
  return error;
});
===== End of File: services\http\interceptor.ts =====


===== File: services\http\request.ts =====
import Taro from '@tarojs/taro';
import type { RequestOptions, ResponseData } from './types';
import { DEFAULT_CONFIG, BUSINESS_CODE } from './config';
import { applyRequestInterceptors, applyResponseInterceptors, applyErrorInterceptors } from './interceptor';
import { handleRequestError, handleBusinessError } from './errorHandler';
import { generateCacheKey, getCacheData, setCacheData, isCacheValid } from './cache';

// 请求计数器
let loadingCount = 0;

/**
 * 显示加载提示
 */
function showLoading(text: string): void {
  loadingCount++;
  
  if (loadingCount === 1) {
    Taro.showLoading({ title: text });
  }
}

/**
 * 隐藏加载提示
 */
function hideLoading(): void {
  loadingCount--;
  
  if (loadingCount === 0) {
    Taro.hideLoading();
  }
}

/**
 * 延迟函数
 */
function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * 统一请求函数
 */
export async function request<T = any>(options: RequestOptions): Promise<T> {
  // 合并配置
  const config = { ...DEFAULT_CONFIG, ...options };
  const { url, method = 'GET', data, baseURL, showLoading: shouldShowLoading, loadingText, useCache, cacheTime, retry, retryDelay } = config;
  
  // 完整URL
  const fullUrl = url.startsWith('http') ? url : `${baseURL}${url.startsWith('/') ? url : `/${url}`}`;
  
  // 检查缓存
  if (useCache && method === 'GET') {
    const cacheKey = generateCacheKey(fullUrl, data);
    const cached = getCacheData<T>(cacheKey);
    
    if (cached && isCacheValid(cached, cacheTime || DEFAULT_CONFIG.cacheTime || 0)) {
      return cached.data;
    }
  }
  
  // 请求前处理
  let requestConfig = await applyRequestInterceptors({ ...config, url: fullUrl });
  
  // 重试计数
  let retryCount = retry || 0;
  
  // 显示加载提示
  if (shouldShowLoading) {
    showLoading(loadingText || '加载中');
  }
  
  try {
    // 发送请求
    const executeRequest = async (): Promise<T> => {
      try {
        const response = await Taro.request({
          url: fullUrl,
          data: requestConfig.data,
          method: requestConfig.method as any,
          header: requestConfig.headers,
          timeout: requestConfig.timeout
        });
        
        // HTTP状态检查
        if (response.statusCode !== 200) {
          throw { statusCode: response.statusCode };
        }
        
        // 业务状态检查
        const responseData = response.data as ResponseData<T>;
        
        if (responseData.code !== BUSINESS_CODE.SUCCESS) {
          throw handleBusinessError(responseData);
        }
        
        // 响应拦截处理
        const processedResponse = await applyResponseInterceptors(responseData, requestConfig);
        
        // 设置缓存
        if (useCache && method === 'GET') {
          const cacheKey = generateCacheKey(fullUrl, data);
          setCacheData(cacheKey, processedResponse.data);
        }
        
        return processedResponse.data;
      } catch (error) {
        // 请求失败但还有重试次数
        if (retryCount > 0) {
          retryCount--;
          // 延迟后重试
          await delay(retryDelay || DEFAULT_CONFIG.retryDelay || 1000);
          return executeRequest();
        }
        
        // 重试次数用完，向上抛出错误
        throw error;
      }
    };
    
    return await executeRequest();
  } catch (error) {
    // 错误处理
    const processedError = await applyErrorInterceptors(error, requestConfig);
    throw handleRequestError(processedError, requestConfig);
  } finally {
    // 隐藏加载提示
    if (shouldShowLoading) {
      hideLoading();
    }
  }
}
===== End of File: services\http\request.ts =====


===== File: services\http\types.ts =====
// 请求方法类型
export type RequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';

// 请求配置
export interface RequestConfig {
  // 基础URL
  baseURL?: string;
  // 是否显示加载提示
  showLoading?: boolean;
  // 加载提示文字
  loadingText?: string;
  // 是否显示错误提示
  showErrorToast?: boolean;
  // 请求头
  headers?: Record<string, string>;
  // 超时时间(ms)
  timeout?: number;
  // 是否使用缓存(仅GET请求)
  useCache?: boolean;
  // 缓存时间(ms)
  cacheTime?: number;
  // 重试次数
  retry?: number;
  // 重试延迟(ms)
  retryDelay?: number;
  // 是否自动携带token
  withToken?: boolean;
}

// 请求参数
export interface RequestOptions extends RequestConfig {
  // 请求地址
  url: string;
  // 请求方法
  method?: RequestMethod;
  // 请求数据
  data?: any;
}

// 响应数据结构
export interface ResponseData<T = any> {
  code: number;
  message: string;
  data: T;
}

// 缓存数据结构
export interface CacheData<T = any> {
  data: T;
  timestamp: number;
}

// 错误信息结构
export interface RequestError {
  code: number;
  message: string;
  data?: any;
}

// 请求拦截器
export type RequestInterceptor = (options: RequestOptions) => RequestOptions | Promise<RequestOptions>;

// 响应拦截器
export type ResponseInterceptor = <T>(response: ResponseData<T>, options: RequestOptions) => ResponseData<T> | Promise<ResponseData<T>>;

// 错误拦截器
export type ErrorInterceptor = (error: any, options: RequestOptions) => any;
===== End of File: services\http\types.ts =====


===== File: styles\theme.css =====
:root,
page{
  /* 主品牌色系 - 蓝色系列，从浅到深 */
  --nutui-brand-1: #EFF6FF; /* 最浅蓝色 - 适合背景、高亮区域 */
  --nutui-brand-2: #DBEAFE; /* 浅蓝色 - 用于轻量强调和背景 */
  --nutui-brand-3: #BFDBFE; /* 中浅蓝色 - 禁用状态 */
  --nutui-brand-4: #93C5FD; /* 渐变起始色 */
  --nutui-brand-5: #60A5FA; /* 中间过渡色 */
  --nutui-brand-6: #3B82F6; /* 主色调 - 亮蓝色 */
  --nutui-brand-7: #2563EB; /* 按压状态色 - 与TabBar选中色相同 */
  --nutui-brand-8: #1D4ED8; /* 深蓝色 - 渐变结束色 */
  --nutui-brand-9: #1E40AF; /* 很深蓝色 */
  --nutui-brand-10: #1E3A8A; /* 最深蓝色 */
  
  /* 渐变色设置 */
  --nutui-brand-stop-1: #60A5FA; /* 渐变起始色 - 对应brand-5 */
  --nutui-brand-stop-2: #2563EB; /* 渐变结束色 - 对应brand-7，与TabBar一致 */
  
  /* 强调色 - 用于特殊元素，防水主题可以用蓝绿色 */
  --nutui-secondary-1: #0EA5E9; /* 蓝绿色强调色 - 与水相关 */
  
  /* 主色调映射 */
  --nutui-color-primary: #2563EB; /* 与TabBar选中色保持一致 */
  --nutui-color-primary-stop-1: var(--nutui-brand-stop-1);
  --nutui-color-primary-stop-2: var(--nutui-brand-stop-2);
  --nutui-color-primary-pressed: var(--nutui-brand-8);
  --nutui-color-primary-disabled: var(--nutui-brand-3);
  --nutui-color-primary-text: #FFFFFF;
  --nutui-color-primary-light: var(--nutui-brand-2);
  
  /* 文本系统 */
  --nutui-gray-7: #1F2937; /* 主要文本 */
  --nutui-gray-6: #4B5563; /* 重要次要文本 */
  --nutui-gray-5: #6B7280; /* 次要文本 */
  --nutui-gray-4: #9CA3AF; /* 分割线/禁用文本 */
  
  /* 背景系统 */
  --nutui-gray-1: #FFFFFF; /* 白色背景 - 与navigationBar背景一致 */
  --nutui-gray-2: #F9FAFB; /* 浅灰背景 - 卡片内嵌背景 */
  --nutui-gray-3: #F3F4F6; /* 灰色背景 - 页面基底色 */
  
  /* 功能色设置 - 与防水服务主题相协调 */
  --nutui-color-success: #10B981; /* 成功色 - 绿色，代表安全可靠 */
  --nutui-color-success-disabled: #D1FAE5;
  --nutui-color-danger: #EF4444; /* 危险色 - 红色，代表警示 */
  --nutui-color-danger-disabled: #FEE2E2;
  --nutui-color-warning: #F59E0B; /* 警告色 - 橙色 */
  --nutui-color-warning-disabled: #FEF3C7;
  --nutui-color-info: #3B82F6; /* 信息色 - 蓝色，与水相关 */
  --nutui-color-info-disabled: #BFDBFE;
  --nutui-color-info-background: linear-gradient(315deg, #60A5FA 0%, #2563EB 100%);
  
  /* TabBar颜色设置 - 保持一致性 */
  --nutui-tabbar-active-color: #2563EB; /* 与TabBar选中色保持一致 */
  --nutui-tabbar-inactive-color: #999999; /* 与TabBar未选中色保持一致 */

  --nutui-picker-title-ok-font-size: 16px;/*picker面板确认字号*/
  --nutui-picker-item-height: 40px; /*picker面板每一条数据高度*/
  --nutui-picker-list-height: 180px;
  --nutui-picker-title-cancel-font-size: 16px;
}
===== End of File: styles\theme.css =====

