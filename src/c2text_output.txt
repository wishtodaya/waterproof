📁 src
  📁 components
    📁 BookingForm
      📄 index.scss
      📄 index.tsx
    📁 ContactInfoCard
      📄 index.scss
      📄 index.tsx
  📁 pages
    📁 contact
      📄 index.config.ts
      📄 index.scss
      📄 index.tsx
  📁 services
    📁 api
      📁 contact
        📄 contactApi.ts
        📄 types.ts
  📁 styles
    📄 theme.css

===== File: components\BookingForm\index.scss =====
/* 预约表单样式 */
.booking-form {
  position: relative;
  padding: 0 4px;
  
  /* ===== 基础表单项样式 ===== */
  .form-item {
    margin-bottom: 20px;
  }
  
  /* 表单标签 */
  .form-item-label {
    display: block;
    font-size: 14px;
    font-weight: 500;
    color: #1e293b;
    margin-bottom: 8px;
    
    /* 必填项标记 */
    &.required::before {
      content: '*';
      color: #ef4444;
      font-size: 16px;
      margin-right: 4px;
    }
  }
  
  /* 错误提示 */
  .form-error-tip {
    font-size: 12px;
    color: #ef4444;
    margin-top: 4px;
    padding-left: 16px;
    position: relative;
    
    &::before {
      content: "!";
      position: absolute;
      left: 0;
      top: 0;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: rgba(239, 68, 68, 0.1);
      color: #ef4444;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: bold;
    }
  }
  
  /* ===== 表单控件通用样式 ===== */
  .form-input,
  .form-select,
  .form-textarea {
    width: 100%;
    background: #ffffff;
    border: 1px solid #dce0e4;
    border-radius: 8px;
    font-size: 14px;
    color: #1e293b;
    box-sizing: border-box;
    margin-top: 8px;
    transition: border-color 0.2s ease;
    
    &:focus, 
    &:active {
      border-color: #3b82f6;
      outline: none;
    }
    
    &::placeholder {
      color: #9ca3af;
    }
  }
  
  /* 输入框 */
  .form-input {
    display: block;
    height: 44px;
    padding: 0 14px;
  }
  
  /* 选择器 */
  .form-select {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 44px;
    padding: 0 14px;
    position: relative;
    
    .select-placeholder {
      color: #9ca3af;
    }
    
    .select-value {
      color: #1e293b;
    }
    
    /* 箭头图标 */
    .select-arrow {
      width: 8px;
      height: 8px;
      border-top: 2px solid #94a3b8;
      border-right: 2px solid #94a3b8;
      transform: rotate(45deg);
      margin-left: 4px;
      flex-shrink: 0;
    }
  }
  
  /* 文本域 */
  .form-textarea {
    display: block;
    min-height: 100px;
    padding: 12px 14px;
    resize: none;
  }
  
  /* ===== 提交按钮 ===== */
  .submit-container {
    margin-top: 24px;
    margin-bottom: 10px;
    width: 100%;
  }
  
  .submit-button {
    display: block;
    width: 100%;
    height: 46px;
    font-size: 16px;
    font-weight: 500;
    color: #ffffff;
    background: #2563EB;
    border-radius: 8px;
    border: none;
    outline: none;
    cursor: pointer;
    transition: opacity 0.2s ease;
    
    &:active {
      opacity: 0.9;
    }
    
    &.loading {
      opacity: 0.8;
    }
  }
}
===== End of File: components\BookingForm\index.scss =====


===== File: components\BookingForm\index.tsx =====
import { useState} from 'react'
import { View, Text, Picker as TaroPicker, Input, Textarea, Button } from '@tarojs/components'
import Taro from '@tarojs/taro'
import { Toast, Picker } from '@nutui/nutui-react-taro'
import './index.scss'

export interface BookingFormData {
  name: string;
  phone: string;
  serviceType: string;
  serviceTypeName: string;
  region: string[];
  address: string;
  remark: string;
}

interface BookingFormProps {
  serviceTypes: { text: string; value: string }[];
  loading: boolean;
  initialValues?: Partial<BookingFormData>;
  onSubmit: (data: BookingFormData) => void;
  onServiceTypeSelect: (type: string) => void;
}

const BookingForm: React.FC<BookingFormProps> = ({ 
  serviceTypes, 
  loading,
  initialValues = {},
  onSubmit, 
  onServiceTypeSelect
}) => {
  // 表单状态
  const [formData, setFormData] = useState<Partial<BookingFormData>>(initialValues);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [showToast, setShowToast] = useState(false);
  const [toastInfo, setToastInfo] = useState({ content: '', icon: 'success' });
  
  // Picker状态
  const [showServicePicker, setShowServicePicker] = useState(false);
  
  // 直接使用serviceTypes，不做映射转换
  const pickerServiceOptions = [serviceTypes];
  
  // 显示提示消息
  const showMessage = (content, icon = 'success') => {
    setToastInfo({ content, icon });
    setShowToast(true);
  };
  
  // 更新表单字段
  const updateField = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // 清除错误
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };
  
  // 处理服务类型确认
  const handleServiceConfirm = (selectedOptions) => {
    if (selectedOptions && selectedOptions[0]) {
      updateField('serviceType', selectedOptions[0].value);
      updateField('serviceTypeName', selectedOptions[0].text);
      onServiceTypeSelect(selectedOptions[0].value);
      
      // 添加震动反馈
      Taro.vibrateShort();
    }
  };
  
  // 处理地区选择
  const handleRegionChange = (e) => {
    updateField('region', e.detail.value);
  };
  
  // 表单验证
  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    // 验证姓名
    if (!formData.name || formData.name.trim().length < 2) {
      newErrors.name = '请输入联系人姓名(至少2个字符)';
    }
    
    // 验证手机号
    if (!formData.phone || !/^1[3-9]\d{9}$/.test(formData.phone)) {
      newErrors.phone = '请输入正确的手机号';
    }
    
    // 验证服务类型
    if (!formData.serviceType) {
      newErrors.serviceType = '请选择服务类型';
    }
    
    // 验证所在地区
    if (!formData.region || !formData.region.length) {
      newErrors.region = '请选择所在地区';
    }
    
    // 验证详细地址
    if (!formData.address || formData.address.trim().length < 5) {
      newErrors.address = '请输入详细地址(至少5个字符)';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  // 提交表单
  const handleSubmit = () => {
    if (validateForm()) {
      // 添加震动反馈
      Taro.vibrateShort();
      onSubmit(formData as BookingFormData);
    } else {
      // 提交失败震动
      Taro.vibrateShort();
      showMessage('请完善必填信息', 'fail');
    }
  };
  
  // 根据表单值获取显示文本
  const getServiceTypeText = () => {
    if (formData.serviceType) {
      const selectedType = serviceTypes.find(item => item.value === formData.serviceType);
      return selectedType?.text || '请选择服务类型';
    }
    return '请选择服务类型';
  };
  
  const getRegionText = () => {
    if (formData.region && formData.region.length > 0) {
      return formData.region.join(' ');
    }
    return '请选择所在地区';
  };
  
  return (
    <View className="booking-form">
      {/* 联系人姓名 */}
      <View className="form-item">
        <Text className="form-item-label required">联系人姓名</Text>
        <Input 
          className="form-input"
          placeholder="请输入姓名"
          value={formData.name}
          onInput={e => updateField('name', e.detail.value)}
        />
        {errors.name && <Text className="form-error-tip">{errors.name}</Text>}
      </View>
      
      {/* 联系电话 */}
      <View className="form-item">
        <Text className="form-item-label required">联系电话</Text>
        <Input
          className="form-input"
          placeholder="请输入手机号码"
          type="number"
          value={formData.phone}
          onInput={e => updateField('phone', e.detail.value)}
        />
        {errors.phone && <Text className="form-error-tip">{errors.phone}</Text>}
      </View>
      
      {/* 服务类型 */}
      <View className="form-item">
        <Text className="form-item-label required">服务类型</Text>
        <View 
          className="form-select"
          onClick={() => setShowServicePicker(true)}
        >
          <Text className={formData.serviceType ? 'select-value' : 'select-placeholder'}>
            {getServiceTypeText()}
          </Text>
          <View className="select-arrow" />
        </View>
        {errors.serviceType && <Text className="form-error-tip">{errors.serviceType}</Text>}
      </View>
      
      {/* 所在地区 */}
      <View className="form-item">
        <Text className="form-item-label required">所在地区</Text>
        <TaroPicker
          mode="region"
          onChange={handleRegionChange}
        >
          <View className="form-select">
            <Text className={formData.region?.length ? 'select-value' : 'select-placeholder'}>
              {getRegionText()}
            </Text>
            <View className="select-arrow" />
          </View>
        </TaroPicker>
        {errors.region && <Text className="form-error-tip">{errors.region}</Text>}
      </View>
      
      {/* 详细地址 */}
      <View className="form-item">
        <Text className="form-item-label required">详细地址</Text>
        <Input
          className="form-input"
          placeholder="请输入详细地址"
          value={formData.address}
          onInput={e => updateField('address', e.detail.value)}
        />
        {errors.address && <Text className="form-error-tip">{errors.address}</Text>}
      </View>
      
      {/* 补充说明 */}
      <View className="form-item">
        <Text className="form-item-label">补充说明</Text>
        <Textarea
          className="form-textarea"
          placeholder="请输入您的具体需求或其他说明（选填）"
          maxlength={200}
          value={formData.remark}
          onInput={e => updateField('remark', e.detail.value)}
        />
      </View>
      
      {/* 提交按钮 */}
      <View className="submit-container">
        <Button
          className={`submit-button ${loading ? 'loading' : ''}`}
          onClick={handleSubmit}
          disabled={loading}
        >
          {loading ? '提交中...' : '立即预约'}
        </Button>
      </View>
      
      {/* NutUI Picker 服务类型选择器 */}
      <Picker
        title="选择服务类型"
        visible={showServicePicker}
        options={pickerServiceOptions}
        defaultValue={formData.serviceType ? [formData.serviceType] : []}
        onClose={() => setShowServicePicker(false)}
        onConfirm={handleServiceConfirm}
      />
      
      {/* 提示信息 */}
      <Toast
        visible={showToast}
        content={toastInfo.content}
        icon={toastInfo.icon}
        onClose={() => setShowToast(false)}
      />
    </View>
  );
};

export default BookingForm;
===== End of File: components\BookingForm\index.tsx =====


===== File: components\ContactInfoCard\index.scss =====
.contact-info {
  .company-intro {
    padding: 20px 16px;
    background: linear-gradient(135deg, #f0f9ff 0%, #ffffff 100%);
    border-bottom: 1px solid #e0f2fe;
    
    text {
      font-size: 15px;
      line-height: 1.6;
      color: #475569;
      text-align: left;
    }
  }
  
  .actions-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;
    padding: 24px 16px;
    background: #ffffff;
  }
  
  .action-card {
    padding: 16px;
    border-radius: 12px;
    text-align: center;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    
    &:active {
      transform: translateY(-2px);
    }
    
    .card-icon {
      font-size: 24px;
      margin-bottom: 8px;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 14px;
    }
    
    &.call-card {
      background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
      border: 1px solid #93c5fd;
      
      &:active {
        background: linear-gradient(135deg, #bfdbfe 0%, #93c5fd 100%);
      }
      
      .card-title {
        color: #1e40af;
      }
    }
    
    &.wechat-card {
      background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
      border: 1px solid #86efac;
      
      &:active {
        background: linear-gradient(135deg, #bbf7d0 0%, #86efac 100%);
      }
      
      .card-title {
        color: #14532d;
      }
    }
  }
  
  .phone-selector {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    padding: 20px;
    
    .selector-content {
      background: #ffffff;
      border-radius: 16px;
      overflow: hidden;
      width: 100%;
      max-width: 320px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
      
      .selector-header {
        padding: 20px 20px 12px;
        text-align: center;
        background: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
        
        .selector-title {
          font-size: 16px;
          font-weight: 600;
          color: #1e293b;
        }
      }
      
      .phone-options {
        .phone-option {
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 18px 20px;
          border-bottom: 1px solid #f1f5f9;
          transition: all 0.2s;
          
          &:last-child {
            border-bottom: none;
          }
          
          &:active {
            background: #f8fafc;
          }
          
          .option-number {
            font-size: 16px;
            font-weight: 600;
            color: #2563eb;
          }
          
          .option-icon {
            color: #64748b;
            font-size: 18px;
          }
        }
      }
      
      .selector-cancel {
        padding: 16px 20px;
        text-align: center;
        background: #f1f5f9;
        border-top: 1px solid #e2e8f0;
        transition: all 0.2s;
        
        &:active {
          background: #e2e8f0;
        }
        
        .cancel-text {
          color: #64748b;
          font-size: 15px;
          font-weight: 500;
        }
      }
    }
  }
}
===== End of File: components\ContactInfoCard\index.scss =====


===== File: components\ContactInfoCard\index.tsx =====
import { useState } from 'react'
import { View, Text } from '@tarojs/components'
import Taro from '@tarojs/taro'
import { Toast } from '@nutui/nutui-react-taro'
import { ContactData } from 'src/services/api/contact/types'
import './index.scss'

interface ContactInfoCardProps {
  data: ContactData;
  onCopyWechat?: () => void;
  onPhoneCall?: (phone: string) => void;
}

const ContactInfoCard: React.FC<ContactInfoCardProps> = ({ 
  data,
  onCopyWechat,
  onPhoneCall
}) => {
  const [showToast, setShowToast] = useState(false);
  const [toastContent, setToastContent] = useState('');
  const [toastIcon, setToastIcon] = useState<'success' | 'fail' | 'loading'>('success');
  const [showPhoneSelector, setShowPhoneSelector] = useState(false);
  
  const showMessage = (content: string, icon: 'success' | 'fail' | 'loading' = 'success') => {
    setToastContent(content);
    setToastIcon(icon);
    setShowToast(true);
  };
  
  const makePhoneCall = (phone: string) => {
    Taro.vibrateShort({ type: 'heavy' });
    setShowPhoneSelector(false);
    
    if (onPhoneCall) {
      onPhoneCall(phone);
    } else {
      Taro.makePhoneCall({
        phoneNumber: phone,
        fail: () => {
          showMessage('拨打失败', 'fail');
        }
      });
    }
  };
  
  const copyWechat = () => {
    Taro.vibrateShort({ type: 'heavy' });
    
    if (onCopyWechat) {
      onCopyWechat();
    } else {
      Taro.setClipboardData({
        data: data.wechat,
        success: () => {
          showMessage('已复制到剪贴板');
        },
        fail: () => {
          showMessage('复制失败', 'fail');
        }
      });
    }
  };
  
  const handleQuickCall = () => {
    if (data.phone.length === 1) {
      makePhoneCall(data.phone[0]);
    } else {
      setShowPhoneSelector(true);
    }
  };
  
  const handlePhoneSelectorClose = () => {
    setShowPhoneSelector(false);
  };
  
  return (
    <View className="contact-info">
      <View className="company-intro">
        <Text>{data.description}</Text>
      </View>
      
      <View className="actions-grid">
        <View className="action-card call-card" onClick={handleQuickCall}>
          <Text className="card-icon">📞</Text>
          <Text className="card-title">立即致电</Text>
        </View>
        
        <View className="action-card wechat-card" onClick={copyWechat}>
          <Text className="card-icon">💬</Text>
          <Text className="card-title">微信咨询</Text>
        </View>
      </View>
      
      {showPhoneSelector && (
        <View className="phone-selector" onClick={handlePhoneSelectorClose}>
          <View className="selector-content" onClick={(e) => e.stopPropagation()}>
            <View className="selector-header">
              <Text className="selector-title">选择号码拨打</Text>
            </View>
            <View className="phone-options">
              {data.phone.map((phone, index) => (
                <View 
                  key={index}
                  className="phone-option"
                  onClick={() => makePhoneCall(phone)}
                >
                  <Text className="option-number">{phone}</Text>
                  <Text className="option-icon">📞</Text>
                </View>
              ))}
            </View>
            <View className="selector-cancel" onClick={handlePhoneSelectorClose}>
              <Text className="cancel-text">取消</Text>
            </View>
          </View>
        </View>
      )}
      
      <Toast
        visible={showToast}
        content={toastContent}
        icon={toastIcon}
        onClose={() => setShowToast(false)}
        duration={2000}
      />
    </View>
  );
};

export default ContactInfoCard;
===== End of File: components\ContactInfoCard\index.tsx =====


===== File: pages\contact\index.config.ts =====
export default definePageConfig({
    navigationBarTitleText: '联系我们'
  })
===== End of File: pages\contact\index.config.ts =====


===== File: pages\contact\index.scss =====
.contact-page {
  min-height: 100vh;
  background: linear-gradient(160deg, #f8fafc 0%, #f1f5f9 100%);
  padding: 16px 12px;
  box-sizing: border-box;
}

.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  
  .loading-text {
    margin-top: 16px;
    font-size: 14px;
    color: #64748b;
  }
}

.contact-container {
  max-width: 600px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.contact-card {
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
  overflow: hidden;
  margin-bottom: 16px;
  
  &.booking-card {
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
    border: 1px solid rgba(203, 213, 225, 0.5);
  }
  
  &.about-card {
    background: linear-gradient(145deg, #ffffff 0%, #f0f9ff 100%);
    border: 1px solid rgba(186, 230, 253, 0.5);
  }
}

.card-header {
  padding: 16px 16px 14px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.card-title {
  display: block;
  font-size: 18px;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 4px;
}

.card-subtitle {
  display: block;
  font-size: 13px;
  color: #64748b;
}

.card-content {
  padding: 16px;
}

@media screen and (min-width: 768px) {
  .contact-page {
    padding: 24px;
  }
  
  .contact-container {
    max-width: 720px;
    display: grid;
    grid-template-columns: 6fr 5fr;
    gap: 20px;
  }
  
  .contact-card {
    margin-bottom: 0;
    height: fit-content;
  }
  
  .about-card {
    position: sticky;
    top: 24px;
  }
}

@media screen and (max-width: 375px) {
  .contact-page {
    padding: 12px 10px;
  }
  
  .card-header {
    padding: 14px 12px 12px;
  }
  
  .card-content {
    padding: 14px 12px;
  }
}
===== End of File: pages\contact\index.scss =====


===== File: pages\contact\index.tsx =====
import { useState, useEffect } from 'react'
import { View, Text } from '@tarojs/components'
import Taro from '@tarojs/taro'
import { Loading, Toast } from '@nutui/nutui-react-taro'
import BookingForm from '../../components/BookingForm'
import ContactInfoCard from '../../components/ContactInfoCard'
import './index.scss'

import { 
  ServiceType, 
  ContactData, 
  BookingFormData 
} from 'src/services/api/contact/types'
import { 
  getServiceTypes, 
  getContactData, 
  submitBooking
} from 'src/services/api/contact/contactApi'

const handleContactError = (err: any): string => {
  console.error(err);
  return err instanceof Error ? err.message : '发生未知错误';
};

export default function ContactPage() {
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [toastInfo, setToastInfo] = useState({ content: '', icon: 'success' });
  
  const [serviceTypes, setServiceTypes] = useState<ServiceType[]>([]);
  const [contactData, setContactData] = useState<ContactData | null>(null);
  
  const [formData, setFormData] = useState<Partial<BookingFormData>>({
    name: '',
    phone: '',
    serviceType: '',
    serviceTypeName: '',
    region: [],
    address: '',
    remark: ''
  });
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        const [serviceTypesRes, contactDataRes] = await Promise.all([
          getServiceTypes(),
          getContactData()
        ]);
        
        if (serviceTypesRes.success && serviceTypesRes.data) {
          setServiceTypes(serviceTypesRes.data);
        } else {
          showMessage(serviceTypesRes.error || '获取服务类型失败', 'fail');
        }
        
        if (contactDataRes.success && contactDataRes.data) {
          setContactData(contactDataRes.data);
        } else {
          showMessage(contactDataRes.error || '获取联系信息失败', 'fail');
        }
      } catch (error) {
        console.error('加载数据失败:', error);
        showMessage('加载数据失败，请稍后重试', 'fail');
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);
  
  const showMessage = (content: string, icon: 'success' | 'fail' | 'loading' = 'success') => {
    setToastInfo({ content, icon });
    setShowToast(true);
  };
  
  const handleFormSubmit = async (data: BookingFormData) => {
    setSubmitting(true);
    
    try {
      const res = await submitBooking(data);
      
      if (res.success) {
        Taro.vibrateShort({ type: 'medium' });
        showMessage('预约成功，我们将尽快与您联系！');
        
        setFormData({
          name: '',
          phone: '',
          serviceType: '',
          serviceTypeName: '',
          region: [],
          address: '',
          remark: ''
        });
      } else {
        showMessage(res.error || '提交失败，请重试', 'fail');
      }
    } catch (error) {
      showMessage(handleContactError(error), 'fail');
    } finally {
      setSubmitting(false);
    }
  };
  
  const handleServiceTypeSelect = (typeValue: string) => {
    const selectedType = serviceTypes.find(type => type.value === typeValue);
    setFormData(prev => ({
      ...prev,
      serviceType: typeValue,
      serviceTypeName: selectedType?.text || ''
    }));
  };
  
  const handlePhoneCall = (phone: string) => {
    Taro.makePhoneCall({
      phoneNumber: phone,
      fail: (err) => {
        if (err.errMsg && !err.errMsg.includes('cancel')) {
          showMessage('拨打电话失败，请重试', 'fail');
        }
      }
    });
  };
  
  const handleCopyWechat = () => {
    if (!contactData) return;
    
    Taro.setClipboardData({
      data: contactData.wechat,
      success: () => {
        showMessage('微信号已复制');
      },
      fail: () => {
        showMessage('复制失败，请重试', 'fail');
      }
    });
  };
  
  if (loading || !contactData) {
    return (
      <View className="loading-container">
        <Loading type="spinner" color="#2563EB" />
        <Text className="loading-text">加载中...</Text>
      </View>
    );
  }
  
  return (
    <View className="contact-page">
      <View className="contact-container">
        <View className="contact-card booking-card">
          <View className="card-header">
            <Text className="card-title">预约服务</Text>
            <Text className="card-subtitle">填写信息免费上门勘测</Text>
          </View>
          <View className="card-content">
            <BookingForm 
              serviceTypes={serviceTypes}
              loading={submitting}
              initialValues={formData}
              onSubmit={handleFormSubmit}
              onServiceTypeSelect={handleServiceTypeSelect}
            />
          </View>
        </View>
        
        <View className="contact-card about-card">
          <View className="card-header">
            <Text className="card-title">联系我们</Text>
            <Text className="card-subtitle">{contactData.address}</Text>
          </View>
          <View className="card-content">
            <ContactInfoCard 
              data={contactData}
              onPhoneCall={handlePhoneCall}
              onCopyWechat={handleCopyWechat}
            />
          </View>
        </View>
      </View>
      
      <Toast
        visible={showToast}
        content={toastInfo.content}
        icon={toastInfo.icon as any}
        onClose={() => setShowToast(false)}
        duration={2000}
      />
    </View>
  );
}
===== End of File: pages\contact\index.tsx =====


===== File: services\api\contact\contactApi.ts =====
import http from '../../http';
import { ServiceType, ContactData, BookingFormData, ApiResponse } from './types';

const ENDPOINTS = {
  GET_SERVICES: '/api/contact/services',
  GET_CONTACT_INFO: '/api/contact/info',
  SUBMIT_BOOKING: '/api/contact/booking',
};

export const getServiceTypes = async (): Promise<ApiResponse<ServiceType[]>> => {
  try {
    const response = await http.get<ServiceType[]>(ENDPOINTS.GET_SERVICES);
    
    return {
      success: true,
      data: response || []
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || '获取服务类型失败'
    };
  }
};

export const getContactData = async (): Promise<ApiResponse<ContactData>> => {
  try {
    const response = await http.get<ContactData>(ENDPOINTS.GET_CONTACT_INFO);
    
    return {
      success: true,
      data: response
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || '获取联系信息失败'
    };
  }
};

export const submitBooking = async (data: BookingFormData): Promise<ApiResponse<{ bookingId: string }>> => {
  try {
    const response = await http.post(ENDPOINTS.SUBMIT_BOOKING, data);
    
    return {
      success: true,
      data: response
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || '提交预约失败'
    };
  }
};
===== End of File: services\api\contact\contactApi.ts =====


===== File: services\api\contact\types.ts =====
export interface ServiceType {
  text: string;
  value: string;
  description: string; 
}

export interface ContactData {
  description: string;  // 公司简介
  phone: string[];     // 电话号码数组
  wechat: string;      // 微信号
  address: string;     // 公司地址
}

export interface BookingFormData {
  name: string;           // 客户姓名
  phone: string;          // 联系电话
  serviceType: string;    // 服务类型值
  serviceTypeName: string; // 服务类型名称
  region: string[];       // 地区数组
  address: string;        // 详细地址
  remark: string;         // 备注
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}
===== End of File: services\api\contact\types.ts =====


===== File: styles\theme.css =====
:root,
page{
  /* 主品牌色系 - 蓝色系列，从浅到深 */
  --nutui-brand-1: #EFF6FF; /* 最浅蓝色 - 适合背景、高亮区域 */
  --nutui-brand-2: #DBEAFE; /* 浅蓝色 - 用于轻量强调和背景 */
  --nutui-brand-3: #BFDBFE; /* 中浅蓝色 - 禁用状态 */
  --nutui-brand-4: #93C5FD; /* 渐变起始色 */
  --nutui-brand-5: #60A5FA; /* 中间过渡色 */
  --nutui-brand-6: #3B82F6; /* 主色调 - 亮蓝色 */
  --nutui-brand-7: #2563EB; /* 按压状态色 - 与TabBar选中色相同 */
  --nutui-brand-8: #1D4ED8; /* 深蓝色 - 渐变结束色 */
  --nutui-brand-9: #1E40AF; /* 很深蓝色 */
  --nutui-brand-10: #1E3A8A; /* 最深蓝色 */
  
  /* 渐变色设置 */
  --nutui-brand-stop-1: #60A5FA; /* 渐变起始色 - 对应brand-5 */
  --nutui-brand-stop-2: #2563EB; /* 渐变结束色 - 对应brand-7，与TabBar一致 */
  
  /* 强调色 - 用于特殊元素，防水主题可以用蓝绿色 */
  --nutui-secondary-1: #0EA5E9; /* 蓝绿色强调色 - 与水相关 */
  
  /* 主色调映射 */
  --nutui-color-primary: #2563EB; /* 与TabBar选中色保持一致 */
  --nutui-color-primary-stop-1: var(--nutui-brand-stop-1);
  --nutui-color-primary-stop-2: var(--nutui-brand-stop-2);
  --nutui-color-primary-pressed: var(--nutui-brand-8);
  --nutui-color-primary-disabled: var(--nutui-brand-3);
  --nutui-color-primary-text: #FFFFFF;
  --nutui-color-primary-light: var(--nutui-brand-2);
  
  /* 文本系统 */
  --nutui-gray-7: #1F2937; /* 主要文本 */
  --nutui-gray-6: #4B5563; /* 重要次要文本 */
  --nutui-gray-5: #6B7280; /* 次要文本 */
  --nutui-gray-4: #9CA3AF; /* 分割线/禁用文本 */
  
  /* 背景系统 */
  --nutui-gray-1: #FFFFFF; /* 白色背景 - 与navigationBar背景一致 */
  --nutui-gray-2: #F9FAFB; /* 浅灰背景 - 卡片内嵌背景 */
  --nutui-gray-3: #F3F4F6; /* 灰色背景 - 页面基底色 */
  
  /* 功能色设置 - 与防水服务主题相协调 */
  --nutui-color-success: #10B981; /* 成功色 - 绿色，代表安全可靠 */
  --nutui-color-success-disabled: #D1FAE5;
  --nutui-color-danger: #EF4444; /* 危险色 - 红色，代表警示 */
  --nutui-color-danger-disabled: #FEE2E2;
  --nutui-color-warning: #F59E0B; /* 警告色 - 橙色 */
  --nutui-color-warning-disabled: #FEF3C7;
  --nutui-color-info: #3B82F6; /* 信息色 - 蓝色，与水相关 */
  --nutui-color-info-disabled: #BFDBFE;
  --nutui-color-info-background: linear-gradient(315deg, #60A5FA 0%, #2563EB 100%);
  
  /* TabBar颜色设置 - 保持一致性 */
  --nutui-tabbar-active-color: #2563EB; /* 与TabBar选中色保持一致 */
  --nutui-tabbar-inactive-color: #999999; /* 与TabBar未选中色保持一致 */

  --nutui-picker-title-ok-font-size: 16px;/*picker面板确认字号*/
  --nutui-picker-item-height: 40px; /*picker面板每一条数据高度*/
  --nutui-picker-list-height: 180px;
  --nutui-picker-title-cancel-font-size: 16px;
}
===== End of File: styles\theme.css =====

