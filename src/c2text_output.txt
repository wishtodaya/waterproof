üìÅ src
  üìÑ app.config.ts
  üìÑ app.scss
  üìÑ app.ts
  üìÅ components
    üìÅ BannerCarousel
      üìÑ index.scss
      üìÑ index.tsx
    üìÅ ShowcaseSection
      üìÑ index.scss
      üìÑ index.tsx
  üìÑ index.html
  üìÅ packageA
    üìÅ pages
  üìÅ pages
    üìÅ index
      üìÑ index.config.ts
      üìÑ index.scss
      üìÑ index.tsx
  üìÅ services
    üìÅ api
      üìÅ index
        üìÑ data.ts
        üìÑ indexApi.ts
        üìÑ types.ts
    üìÅ http
      üìÑ cache.ts
      üìÑ config.ts
      üìÑ errorHandler.ts
      üìÑ index.ts
      üìÑ interceptor.ts
      üìÑ request.ts
      üìÑ types.ts
  üìÅ styles
    üìÑ theme.css

===== File: app.config.ts =====
export default defineAppConfig({
  // Â∞ÜÊâÄÊúâTabBarÈ°µÈù¢ÊîæÂú®‰∏ªÂåÖ‰∏≠
  pages: [
    'pages/index/index',
    'pages/product/index',
    'pages/cases/index',
    'pages/contact/index'
  ],
  window: {
    backgroundTextStyle: 'light',
    navigationBarBackgroundColor: '#FFFFFF',
    navigationBarTitleText: 'ÈÉëÂºè‰øÆÁºÆ', // ‰øÆÊîπÂØºËà™Ê†áÈ¢ò
    navigationBarTextStyle: 'black'
  },
  // ÈùûTabBarÈ°µÈù¢ÂèØ‰ª•ÊîæÂú®ÂàÜÂåÖ‰∏≠
  subPackages: [],
  tabBar: {
    color: '#757575',
    selectedColor: '#2563EB',
    backgroundColor: '#FFFFFF',
    borderStyle: 'white',
    list: [
      {
        pagePath: 'pages/index/index',
        text: 'È¶ñÈ°µ',
        iconPath: 'assets/tab-bar/home.png',
        selectedIconPath: 'assets/tab-bar/home-active.png'
      },
      {
        pagePath: 'pages/product/index',
        text: '‰∫ßÂìÅ',
        iconPath: 'assets/tab-bar/service.png',
        selectedIconPath: 'assets/tab-bar/service-active.png'
      },
      {
        pagePath: 'pages/cases/index',
        text: 'Ê°à‰æã',
        iconPath: 'assets/tab-bar/case.png',
        selectedIconPath: 'assets/tab-bar/case-active.png'
      },
      {
        pagePath: 'pages/contact/index',
        text: 'ËÅîÁ≥ªÊàë‰ª¨',
        iconPath: 'assets/tab-bar/contact.png',
        selectedIconPath: 'assets/tab-bar/contact-active.png'
      }
    ]
  },
  lazyCodeLoading: "requiredComponents"
})
===== End of File: app.config.ts =====


===== File: app.scss =====
/* app.scss - ÈÄÇÁî®‰∫é Taro + NutUI React Â§öÁ´ØÈ°πÁõÆ */

/* ÂÖ®Â±ÄÂü∫Á°ÄÊ†∑Âºè */
page {
    height: 100%;
    font-size: 16px;
    line-height: 1.5;
    color: var(--nutui-gray-7);
    background-color: var(--nutui-gray-3);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
  }
  
  /* ÂÆπÂô®Â∏ÉÂ±Ä */
  .container {
    padding: 10px;
  }
  
  /* ÂºπÊÄßÂ∏ÉÂ±ÄÂ∑•ÂÖ∑ */
  .flex {
    display: flex;
    
    &-center {
      align-items: center;
      justify-content: center;
    }
    
    &-between {
      align-items: center;
      justify-content: space-between;
    }
    
    &-column {
      flex-direction: column;
    }
  }
  
  /* Èó¥Ë∑ùËæÖÂä©Á±ª - Á≤æÁÆÄÁâà */
  .mt-10 { margin-top: 10px; }
  .mr-10 { margin-right: 10px; }
  .mb-10 { margin-bottom: 10px; }
  .ml-10 { margin-left: 10px; }
  .pt-10 { padding-top: 10px; }
  .pr-10 { padding-right: 10px; }
  .pb-10 { padding-bottom: 10px; }
  .pl-10 { padding-left: 10px; }
  
  /* Â∏∏Áî®ÊñáÊú¨Ê†∑Âºè */
  .text-primary { color: var(--nutui-color-primary); }
  .text-center { text-align: center; }
  .text-bold { font-weight: bold; }
  
  /* Âç°ÁâáÁªÑ‰ª∂ */
  .card {
    background-color: #fff;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  /* 1px ËæπÊ°ÜËß£ÂÜ≥ÊñπÊ°à */
  .hairline-bottom {
    position: relative;
    
    &::after {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
      height: 1px;
      background-color: var(--nutui-gray-4);
      transform: scaleY(0.5);
    }
  }
  
  /* ÂÆâÂÖ®Âå∫ÈÄÇÈÖç */
  .safe-bottom {
    padding-bottom: constant(safe-area-inset-bottom);
    padding-bottom: env(safe-area-inset-bottom);
  }
===== End of File: app.scss =====


===== File: app.ts =====
import  { useEffect } from 'react'
import { useDidShow, useDidHide } from '@tarojs/taro'

// ÂÖ®Â±ÄÊ†∑Âºè
import './styles/theme.css'
import './app.scss'

function App(props) {
  // ÂèØ‰ª•‰ΩøÁî®ÊâÄÊúâÁöÑ React Hooks
  useEffect(() => {})

  // ÂØπÂ∫î onShow
  useDidShow(() => {})

  // ÂØπÂ∫î onHide
  useDidHide(() => {})

  return props.children
}

export default App
===== End of File: app.ts =====


===== File: components\BannerCarousel\index.scss =====
.banner-carousel {
  width: 100%;
  height: 180px;
  overflow: hidden;
  position: relative;
}

.banner-swiper {
  width: 100%;
  height: 100%;
}

.banner-item {
  width: 100%;
  height: 100%;
  position: relative;
}

.banner-image {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}

.banner-content {
  position: absolute;
  z-index: 2;
  left: 0;
  bottom: 0;
  width: 100%;
  padding: 16px 20px;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0));
  text-align: left;
}

.banner-title {
  font-size: 22px;
  font-weight: bold;
  color: #fff;
  margin-bottom: 4px;
  display: block;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
}

.banner-subtitle {
  font-size: 14px;
  color: rgba(255, 255, 255, 0.9);
  display: block;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
}
===== End of File: components\BannerCarousel\index.scss =====


===== File: components\BannerCarousel\index.tsx =====
import { View, Text, Image, Swiper, SwiperItem } from '@tarojs/components'
import { Banner } from 'src/services/api/index/types'
import './index.scss'

interface BannerCarouselProps {
  banners: Banner[];
}

export default function BannerCarousel({ banners }: BannerCarouselProps) {
  return (
    <View className='banner-carousel'>
      <Swiper
        className='banner-swiper'
        indicatorColor='#ddd'
        indicatorActiveColor='#2563EB'
        circular
        indicatorDots
        autoplay
        interval={3500}
      >
        {banners.map(banner => (
          <SwiperItem key={banner.id}>
            <View className='banner-item'>
              <Image 
                className='banner-image' 
                src={banner.imageUrl} 
                mode='aspectFill'
              />
              <View className='banner-content'>
                {banner.title && (
                  <Text className='banner-title'>{banner.title}</Text>
                )}
                
                {banner.subtitle && (
                  <Text className='banner-subtitle'>{banner.subtitle}</Text>
                )}
              </View>
            </View>
          </SwiperItem>
        ))}
      </Swiper>
    </View>
  )
}
===== End of File: components\BannerCarousel\index.tsx =====


===== File: components\ShowcaseSection\index.scss =====
// src/components/ShowcaseSection/index.scss

// ÈÄöÁî®ÊùøÂùóÊ†∑Âºè
.section {
    margin: 0 15px 20px;
    background: #fff;
    border-radius: 12px;
    padding: 18px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.06);
  }
  
  .section-header {
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .section-title {
    font-size: 16px;
    font-weight: bold;
    color: #333;
    position: relative;
    padding-left: 12px;
    
    &::before {
      content: '';
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      width: 4px;
      height: 18px;
      background: linear-gradient(to bottom, #3B82F6, #2563EB);
      border-radius: 4px;
    }
  }
  
  // ÂõæÁâáÂä†ËΩΩÂíåÈîôËØØÁä∂ÊÄÅ
  .case-image-loading,
  .case-image-error {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f0f0f0;
    color: #999;
    font-size: 14px;
  }
  
  .case-image-error {
    background-color: #fafafa;
  }
  
  // Ê°à‰æãÂ±ïÁ§∫
  .case-container {
    margin-top: 5px;
  }
  
  .case-feature {
    margin-bottom: 15px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    
    &:active {
      transform: translateY(-2px);
      box-shadow: 0 5px 12px rgba(0, 0, 0, 0.12);
    }
    
    .case-image {
      width: 100%;
      height: 160px;
      border-radius: 0;
      
      :global(.nut-image-img) {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    }
    
    .case-content {
      padding: 12px;
      background: #fff;
    }
    
    .case-title {
      font-size: 15px;
      font-weight: bold;
      color: #333;
      margin-bottom: 5px;
      display: block;
    }
    
    .case-description {
      font-size: 13px;
      color: #666;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      line-height: 1.5;
    }
  }
  
  .case-grid {
    display: flex;
    justify-content: space-between;
    
    .case-item {
      width: calc(50% - 5px);
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
      
      &:active {
        transform: translateY(-2px);
        box-shadow: 0 5px 12px rgba(0, 0, 0, 0.12);
      }
      
      .case-image {
        width: 100%;
        height: 90px;
        border-radius: 0;
        
        :global(.nut-image-img) {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }
      
      .case-content {
        padding: 10px;
        background: #fff;
      }
      
      .case-title {
        font-size: 13px;
        color: #333;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
        font-weight: 500;
      }
    }
  }
  
  // ÂºπÁ™óÊ†∑Âºè
  .case-detail-popup {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .popup-header {
    padding: 16px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .popup-title {
    font-size: 16px;
    font-weight: bold;
    color: #333;
    flex: 1;
    padding-right: 10px;
  }
  
  .popup-close {
    width: 28px;
    height: 28px;
    font-size: 24px;
    line-height: 24px;
    text-align: center;
    color: #999;
    border-radius: 50%;
    background-color: #f5f5f5;
    
    &:active {
      background-color: #eee;
      color: #666;
    }
  }
  
  .popup-content {
    flex: 1;
    padding: 10px 16px 16px 16px;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }
  
  .case-detail-image {
    width: 100%;
    height: 160px;
    object-fit: cover;
    border-radius: 12px;
    margin-top: 0;
    margin-bottom: 10px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    
    :global(.nut-image-img) {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 12px;
    }
  }
  
  .case-detail-description {
    font-size: 14px;
    font-weight: bold;
    color: #2563EB;
    margin-bottom: 12px;
    display: block;
  }
  
  .case-detail-content {
    font-size: 14px;
    color: #666;
    line-height: 1.6;
    margin-bottom: 20px;
    display: block;
    text-align: justify;
  }
  
  .detail-button {
    margin-top: 20px;
    height: 44px;
    font-size: 15px;
    font-weight: 500;
    border-radius: 8px;
    box-shadow: 0 3px 8px rgba(37, 99, 235, 0.2);
    background: #2563EB;
    color: #fff;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    
    &:active {
      transform: translateY(1px);
      box-shadow: 0 1px 4px rgba(37, 99, 235, 0.2);
      background: #1d4ed8;
    }
  }
===== End of File: components\ShowcaseSection\index.scss =====


===== File: components\ShowcaseSection\index.tsx =====
// src/components/ShowcaseSection/index.tsx
import { useState } from 'react'
import { View, Text } from '@tarojs/components'
import { Image, Popup } from '@nutui/nutui-react-taro'
import Taro from '@tarojs/taro'
import { Showcase } from 'src/services/api/index/indexApi'
import './index.scss'

interface ShowcaseSectionProps {
  showcases: Showcase[];
  title?: string;
  contactPhone?: string;
  onShowToast?: (message: string, type: 'success' | 'fail' | 'warn') => void;
}

const ShowcaseSection: React.FC<ShowcaseSectionProps> = ({
  showcases,
  title = 'Á≤æÈÄâÊ°à‰æã',
  contactPhone,
  onShowToast
}) => {
  // Áä∂ÊÄÅÁÆ°ÁêÜ
  const [showShowcaseDetail, setShowShowcaseDetail] = useState(false);
  const [selectedShowcase, setSelectedShowcase] = useState<Showcase | null>(null);

  // Êü•ÁúãÊ°à‰æãËØ¶ÊÉÖ
  const handleShowcaseClick = (showcase: Showcase) => {
    setSelectedShowcase(showcase);
    setShowShowcaseDetail(true);
  };

  // ÁîµËØùÂí®ËØ¢
  const handleCall = () => {
    if (!contactPhone) return;
    
    Taro.makePhoneCall({
      phoneNumber: contactPhone
    }).catch(err => {
      if (err.errMsg && !err.errMsg.includes('cancel')) {
        onShowToast?.('Êã®Âè∑Â§±Ë¥•', 'fail');
      }
    });
  };

  if (!showcases?.length) {
    return null;
  }

  return (
    <View className='section showcase-section'>
      <View className='section-header'>
        <Text className='section-title'>{title}</Text>
      </View>
      
      <View className='case-container'>
        {/* ‰∏ªÊ°à‰æã */}
        <View 
          className='case-feature'
          onClick={() => handleShowcaseClick(showcases[0])}
        >
          <Image 
            src={showcases[0].imageUrl}
            width="100%"
            height="160px"
            className='case-image'
            loading={<View className="case-image-loading"></View>}
            error={<View className="case-image-error"></View>}
          />
          <View className='case-content'>
            <Text className='case-title'>{showcases[0].title}</Text>
            <Text className='case-description'>{showcases[0].description}</Text>
          </View>
        </View>
        
        {/* Ê¨°Ë¶ÅÊ°à‰æãÁΩëÊ†º */}
        {showcases.length > 1 && (
          <View className='case-grid'>
            {showcases.slice(1).map(item => (
              <View 
                key={item.id} 
                className='case-item'
                onClick={() => handleShowcaseClick(item)}
              >
                <Image 
                  src={item.imageUrl}
                  width="100%"
                  height="90px"
                  className='case-image'
                  loading={<View className="case-image-loading"></View>}
                  error={<View className="case-image-error"></View>}
                />
                <View className='case-content'>
                  <Text className='case-title'>{item.title}</Text>
                </View>
              </View>
            ))}
          </View>
        )}
      </View>

      {/* Ê°à‰æãËØ¶ÊÉÖÂºπÁ™ó */}
      {selectedShowcase && (
        <Popup
          visible={showShowcaseDetail}
          position="bottom"
          round
          onClose={() => setShowShowcaseDetail(false)}
          style={{ height: '70%' }}
        >
          <View className='case-detail-popup'>
            <View className='popup-header'>
              <Text className='popup-title'>{selectedShowcase.title}</Text>
              <View 
                className='popup-close'
                onClick={() => setShowShowcaseDetail(false)}
              >
                √ó
              </View>
            </View>
            <View className='popup-content'>
              <Image 
                src={selectedShowcase.imageUrl}
                width="100%"
                height="160px"
                className='case-detail-image'
                loading={<View className="case-image-loading"></View>}
                error={<View className="case-image-error"></View>}
              />
              <Text className='case-detail-description'>{selectedShowcase.description}</Text>
              <Text className='case-detail-content'>{selectedShowcase.content}</Text>
              {contactPhone && (
                <View 
                  className='detail-button'
                  onClick={handleCall}
                >
                  Âí®ËØ¢Ê≠§ÊñπÊ°à
                </View>
              )}
            </View>
          </View>
        </Popup>
      )}
    </View>
  );
};

export default ShowcaseSection;
===== End of File: components\ShowcaseSection\index.tsx =====


===== File: index.html =====
<!DOCTYPE html>
<html>
<head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
  <meta content="width=device-width,initial-scale=1,user-scalable=no" name="viewport">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-touch-fullscreen" content="yes">
  <meta name="format-detection" content="telephone=no,address=no">
  <meta name="apple-mobile-web-app-status-bar-style" content="white">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
  <title>waterproof</title>
  <script><%= htmlWebpackPlugin.options.script %></script>
</head>
<body>
  <div id="app"></div>
</body>
</html>
===== End of File: index.html =====


===== File: pages\index\index.config.ts =====
export default {
  navigationBarTitleText: 'ÈÉëÂºè‰øÆÁºÆ',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5',
  backgroundTextStyle: 'dark',
  navigationBarBackgroundColor: '#ffffff',
  navigationBarTextStyle: 'black'
}
===== End of File: pages\index\index.config.ts =====


===== File: pages\index\index.scss =====
/* Èò≤Ê∞¥ÊúçÂä°Â∞èÁ®ãÂ∫èÊ†∑Âºè */

// È°µÈù¢Êï¥‰ΩìÊ†∑Âºè
.page {
  background-color: #f5f7fa;
  min-height: 100vh;
  padding-bottom: calc(20px + env(safe-area-inset-bottom));
}

// Âä†ËΩΩÁä∂ÊÄÅ
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  
  .loading-text {
    margin-top: 12px;
    color: #666;
    font-size: 14px;
  }
}
===== End of File: pages\index\index.scss =====


===== File: pages\index\index.tsx =====
// pages/index/index.tsx
import { useEffect, useState } from 'react'
import { View, Text } from '@tarojs/components'
import { Toast, Loading } from '@nutui/nutui-react-taro'
import Taro from '@tarojs/taro'
import './index.scss'

// ÂØºÂÖ•ÁªÑ‰ª∂
import BannerCarousel from 'src/components/BannerCarousel'
import QuickContact from 'src/components/QuickContact'
import ServiceSection from 'src/components/ServiceSection'
import ShowcaseSection from 'src/components/ShowcaseSection'

// Áõ¥Êé•ÂØºÂÖ•APIÂíåÁ±ªÂûã
import { IndexData } from 'src/services/api/index/types'
import { getIndexData, handleIndexError } from 'src/services/api/index/indexApi'

export default function IndexPage() {
  // Áä∂ÊÄÅÁÆ°ÁêÜ
  const [loading, setLoading] = useState(true)
  const [indexData, setIndexData] = useState<IndexData | null>(null)
  const [showToast, setShowToast] = useState(false)
  const [toastMsg, setToastMsg] = useState('')
  const [toastType, setToastType] = useState<'success' | 'fail' | 'warn'>('success')
  
  // ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ
  const showToastMessage = (message: string, type: 'success' | 'fail' | 'warn' = 'success') => {
    if (showToast) {
      setShowToast(false)
      setTimeout(() => {
        setToastMsg(message)
        setToastType(type)
        setShowToast(true)
      }, 100)
    } else {
      setToastMsg(message)
      setToastType(type)
      setShowToast(true)
    }
  }
  
  // Ëé∑ÂèñÊï∞ÊçÆ
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      
      try {
        // Ëé∑ÂèñÊâÄÊúâÈ¶ñÈ°µÊï∞ÊçÆ
        const result = await getIndexData()
        
        if (result.success && result.data) {
          setIndexData(result.data)
        } else {
          showToastMessage(result.error || 'Ëé∑ÂèñÈ¶ñÈ°µÊï∞ÊçÆÂ§±Ë¥•', 'fail')
        }
      } catch (error) {
        console.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error)
        showToastMessage(handleIndexError(error), 'fail')
      } finally {
        setLoading(false)
      }
    }
    
    fetchData()
  }, [])
  
  // ‰∏ãÊãâÂà∑Êñ∞Â§ÑÁêÜ
  useEffect(() => {
    Taro.eventCenter.on('pullDownRefresh', async () => {
      try {
        // Âà∑Êñ∞È¶ñÈ°µÊï∞ÊçÆ
        const result = await getIndexData()
        
        if (result.success && result.data) {
          setIndexData(result.data)
          showToastMessage('Âà∑Êñ∞ÊàêÂäü', 'success')
        } else {
          showToastMessage(result.error || 'Âà∑Êñ∞Êï∞ÊçÆÂ§±Ë¥•', 'fail')
        }
      } catch (error) {
        showToastMessage(handleIndexError(error), 'fail')
      } finally {
        Taro.stopPullDownRefresh()
      }
    })
    
    return () => {
      Taro.eventCenter.off('pullDownRefresh')
    }
  }, [])
  
  // Âä†ËΩΩÁä∂ÊÄÅ
  if (loading || !indexData) {
    return (
      <View className='loading-container'>
        <Loading type='spinner' />
        <Text className='loading-text'>Âä†ËΩΩ‰∏≠...</Text>
      </View>
    )
  }
  
  return (
    <View className='page'>
      {/* BannerÂå∫Âüü */}
      <BannerCarousel banners={indexData.banners} />
      
      {/* Âø´ÈÄüËÅîÁ≥ª */}
      <QuickContact 
        contactInfo={indexData.contactInfo}
        onShowToast={showToastMessage}
      />
      
      {/* ÊúçÂä°ÂàÜÁ±ª */}
      <ServiceSection services={indexData.services} />
      
      {/* Á≤æÈÄâÊ°à‰æã */}
      <ShowcaseSection 
        showcases={indexData.showcases}
        contactPhone={indexData.contactInfo.phone}
        onShowToast={showToastMessage}
      />
      
      {/* ToastÁªÑ‰ª∂ */}
      <Toast
        msg={toastMsg}
        visible={showToast}
        type={toastType}
        onClose={() => setShowToast(false)}
        duration={2000}
        position='center'
        closeOnOverlayClick
      />
    </View>
  )
}
===== End of File: pages\index\index.tsx =====


===== File: services\api\index\data.ts =====
// services/api/index/data.ts
import { IndexData } from './types';

// È¶ñÈ°µÊ®°ÊãüÊï∞ÊçÆ
export const indexData: IndexData = {
  // ÊúçÂä°Êï∞ÊçÆ - ‰øÆÊîπ‰∏∫Êñ∞ÁöÑÂõõÈ°πÊúçÂä°
  services: [
    {
      id: 1,
      title: 'ÊºèÊ∞¥Ê£ÄÊµã',
      description: '‰∏ì‰∏öÊ£ÄÊµãÊäÄÊúØÔºåÁ≤æÂáÜÂÆö‰ΩçÊºèÊ∞¥ÁÇπ'
    },
    {
      id: 2,
      title: 'Èò≤Ê∞¥ÊñΩÂ∑•',
      description: 'È´òÊ†áÂáÜÈò≤Ê∞¥Â∑•Á®ãÔºåÊùúÁªùÂêéÈ°æ‰πãÂøß'
    },
    {
      id: 3,
      title: 'Ê∏óÊºèÁª¥‰øÆ',
      description: 'Âø´ÈÄüÂ∫îÂØπÂêÑÁ±ªÊ∏óÊºèÈóÆÈ¢òÔºåÂèäÊó∂‰øÆÂ§ç'
    },
    {
      id: 4,
      title: 'ÊùêÊñôÈîÄÂîÆ',
      description: '‰ºòË¥®Èò≤Ê∞¥ÊùêÊñôÔºå‰∏ì‰∏öÊäÄÊúØÊîØÊåÅ'
    }
  ],
  
  // Á≤æÈÄâÊ°à‰æãÊï∞ÊçÆ
  showcases: [
    {
      id: '1',
      imageUrl: 'https://storage.360buyimg.com/jdc-article/welcomenutui.jpg',
      title: 'ÂüéÂ∏ÇËä±Âõ≠Â∞èÂå∫Â±ãÈ°∂Èò≤Ê∞¥Â∑•Á®ã',
      description: 'Ëß£ÂÜ≥Â±ãÈ°∂ÈïøÊúüÊ∏óÊ∞¥ÈóÆÈ¢òÔºåÈááÁî®ÊúÄÊñ∞Èò≤Ê∞¥ÊùêÊñôÔºå5Âπ¥Ë¥®‰øù',
      content: 'ÂüéÂ∏ÇËä±Âõ≠Â∞èÂå∫Âª∫‰∫é2010Âπ¥ÔºåÂ±ãÈ°∂ÈïøÊúüÂ≠òÂú®Ê∏óÊ∞¥ÈóÆÈ¢òÔºåÂΩ±ÂìçÂ±ÖÊ∞ëÊ≠£Â∏∏ÁîüÊ¥ª„ÄÇÊàë‰ª¨‰ΩøÁî®È´òÂàÜÂ≠êÈò≤Ê∞¥Âç∑ÊùêÂØπÂ±ãÈ°∂ËøõË°åÂÖ®Èù¢Èò≤Ê∞¥Â§ÑÁêÜÔºåÂπ∂Â¢ûÂä†‰∫ÜÊéíÊ∞¥Á≥ªÁªüÊîπÈÄ†ÔºåÂΩªÂ∫ïËß£ÂÜ≥‰∫ÜÊºèÊ∞¥ÈóÆÈ¢ò„ÄÇËØ•Â∑•Á®ãË¶ÜÁõñÈù¢ÁßØËææ2000Âπ≥ÊñπÁ±≥ÔºåÂ∑•Êúü15Â§©ÔºåÊèê‰æõ5Âπ¥Ë¥®‰øùÊúçÂä°„ÄÇ'
    },
    {
      id: '2',
      imageUrl: 'https://storage.360buyimg.com/jdc-article/NutUItaro2.jpg',
      title: 'Êª®Ê±üË±™Â∫≠Âà´Â¢ÖÈò≤Ê∞¥Â∑•Á®ã',
      description: 'Âà´Â¢ÖÂú∞‰∏ãÂÆ§„ÄÅÊ∏∏Ê≥≥Ê±†„ÄÅÂç´ÁîüÈó¥Êï¥‰ΩìÈò≤Ê∞¥ÔºåÁ°Æ‰øù‰∏áÊó†‰∏ÄÂ§±',
      content: 'Êª®Ê±üË±™Â∫≠Âà´Â¢ÖÊòØÈ´òÁ´Ø‰ΩèÂÆÖÈ°πÁõÆÔºå‰∏ö‰∏ªË¶ÅÊ±ÇÂØπÂú∞‰∏ãÂÆ§„ÄÅÊ∏∏Ê≥≥Ê±†ÂèäÂç´ÁîüÈó¥ËøõË°åÈ´òÊ†áÂáÜÈò≤Ê∞¥Â§ÑÁêÜ„ÄÇÊàë‰ª¨ÈááÁî®‰∫ÜÂèåÂ±ÇÈò≤Ê∞¥ÊäÄÊúØÔºåÂÜÖÂ±Ç‰ΩøÁî®ÊüîÊÄßÈò≤Ê∞¥Ê∂ÇÊñôÔºåÂ§ñÂ±Ç‰ΩøÁî®Ëá™Á≤òÈò≤Ê∞¥Âç∑ÊùêÔºåÂπ∂Âú®ÂÖ≥ÈîÆÈÉ®‰ΩçÂ¢ûÂä†‰∫ÜÈò≤Ê∞¥ÈôÑÂä†Â±Ç„ÄÇÊï¥‰∏™Â∑•Á®ãÂéÜÊó∂25Â§©ÔºåÈò≤Ê∞¥Èù¢ÁßØËææ800Âπ≥ÊñπÁ±≥ÔºåÈÄöËøá‰∫Ü72Â∞èÊó∂ËìÑÊ∞¥ÊµãËØïÔºåÁ°Æ‰øù‰∏áÊó†‰∏ÄÂ§±„ÄÇ'
    },
    {
      id: '3',
      imageUrl: 'https://storage.360buyimg.com/jdc-article/NutUItaro34.jpg',
      title: 'Èò≥ÂÖâÂïÜÂüéÂ§ñÂ¢ôÈò≤Ê∞¥ÁøªÊñ∞',
      description: 'Â§ßÂûãÂïÜ‰∏öÁªºÂêà‰ΩìÂ§ñÂ¢ôÈò≤Ê∞¥ÔºåÁæéËßÇ‰∏éÂÆûÁî®Âπ∂Èáç',
      content: 'Èò≥ÂÖâÂïÜÂüéÊòØÂ∏Ç‰∏≠ÂøÉÂ§ßÂûãÂïÜ‰∏öÁªºÂêà‰ΩìÔºåÂª∫ÊàêÂ∑≤Êúâ8Âπ¥ÔºåÂ§ñÂ¢ôÂá∫Áé∞Â§öÂ§ÑÊ∏óÊ∞¥ÂíåÂ¢ôÈù¢ËÑ±ËêΩÁé∞Ë±°„ÄÇÊàë‰ª¨ÂØπÊï¥‰∏™Â§ñÂ¢ôËøõË°å‰∫ÜÊ∏ÖÊ¥Å„ÄÅ‰øÆÂ§çÂíåÈò≤Ê∞¥Â§ÑÁêÜÔºåÈááÁî®‰∫ÜÊñ∞ÂûãÁ∫≥Á±≥Èò≤Ê∞¥Ê∂ÇÊñôÔºåÂÖ∑Êúâ‰ºòÂºÇÁöÑÈò≤Ê∞¥ÊÄßËÉΩÂíåËÄêÂÄôÊÄß„ÄÇÂ∑•Á®ãÈù¢ÁßØËææ5000Âπ≥ÊñπÁ±≥Ôºå‰∏ç‰ªÖËß£ÂÜ≥‰∫ÜÊ∏óÊ∞¥ÈóÆÈ¢òÔºåËøòÊÅ¢Â§ç‰∫ÜÂª∫Á≠ëÂ§ñËßÇÔºå‰ΩøÂïÜÂüéÁÑïÁÑ∂‰∏ÄÊñ∞„ÄÇ'
    }
  ],
  
  // ËÅîÁ≥ª‰ø°ÊÅØ
  contactInfo: {
    phone: '400-123-4567',
    wechat: 'waterproof123'
  },
  
  // BannerÊï∞ÊçÆ - ‰øÆÊîπÊ†áÈ¢ò
  banners: [
    {
      id: '1',
      imageUrl: 'https://img.picui.cn/free/2025/05/21/682d7803ab8ad.png',
      title: 'ÈÉëÂºè‰øÆÁºÆ',
      subtitle: '‰∏ì‰∏ö‰øÆÁºÆ ¬∑ ÂìÅË¥®‰øùÈöú'
    },
    {
      id: '2',
      imageUrl: 'https://img.picui.cn/free/2025/05/21/682d7803ab8ad.png',
      title: 'ÈÉëÂºè‰øÆÁºÆ',
      subtitle: '‰∏ì‰∏ö‰øÆÁºÆ ¬∑ ÂìÅË¥®‰øùÈöú'
    },
    {
      id: '3',
      imageUrl: 'https://img.picui.cn/free/2025/05/21/682d7803ab8ad.png',
      title: 'ÈÉëÂºè‰øÆÁºÆ',
      subtitle: '‰∏ì‰∏ö‰øÆÁºÆ ¬∑ ÂìÅË¥®‰øùÈöú'
    }
  ]
};
===== End of File: services\api\index\data.ts =====


===== File: services\api\index\indexApi.ts =====
// services/api/index/indexApi.ts
import http from '../../http';
import { IndexData, ApiResponse } from './types';
import { indexData } from './data';

// APIÁ´ØÁÇπ
const ENDPOINTS = {
  GET_INDEX_DATA: '/index',
};

/**
 * Ëé∑ÂèñÈ¶ñÈ°µÊâÄÊúâÊï∞ÊçÆ
 */
export const getIndexData = async (): Promise<ApiResponse<IndexData>> => {
  try {
    // ÊõøÊç¢‰∏∫ÂÆûÈôÖAPIË∞ÉÁî®ÂΩìÂêéÁ´ØÂáÜÂ§áÂ•ΩÊó∂
    // const data = await http.get<IndexData>(ENDPOINTS.GET_INDEX_DATA);
    
    // Ê®°ÊãüAPIË∞ÉÁî®Âª∂Ëøü
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // ËøîÂõûÊ®°ÊãüÊï∞ÊçÆ
    return {
      success: true,
      data: indexData
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || 'Ëé∑ÂèñÈ¶ñÈ°µÊï∞ÊçÆÂ§±Ë¥•'
    };
  }
};

/**
 * È¶ñÈ°µÊ®°ÂùóÈîôËØØÂ§ÑÁêÜÂ∑•ÂÖ∑
 */
export const handleIndexError = (err: any): string => {
  console.error('Index API Error:', err);
  return err instanceof Error ? err.message : 'Ëé∑ÂèñÈ¶ñÈ°µÊï∞ÊçÆÊó∂ÂèëÁîüÊú™Áü•ÈîôËØØ';
};

// ÂØºÂá∫Á±ªÂûãÂíåÊï∞ÊçÆ
export * from './types';
export * from './data';
===== End of File: services\api\index\indexApi.ts =====


===== File: services\api\index\types.ts =====
// services/index/api/types.ts

// ÊúçÂä°È°πÊé•Âè£ - Âà†Èô§featuresÂ±ûÊÄß
export interface Service {
    id: number | string;
    title: string;
    description: string;
}
  
// Á≤æÈÄâÊ°à‰æãÊé•Âè£
export interface Showcase {
    id: string;
    imageUrl: string;
    title: string;
    description: string;
    content: string;
}
  
// ËÅîÁ≥ª‰ø°ÊÅØÊé•Âè£
export interface ContactInfo {
    phone: string;
    wechat: string;
}
  
// BannerÊé•Âè£
export interface Banner {
    id: string;
    imageUrl: string;
    title?: string;
    subtitle?: string;
}
  
// È¶ñÈ°µÊï∞ÊçÆÊé•Âè£
export interface IndexData {
    services: Service[];
    showcases: Showcase[];
    contactInfo: ContactInfo;
    banners: Banner[];
}
  
// APIÂìçÂ∫îÂåÖË£ÖÂô®
export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
}
===== End of File: services\api\index\types.ts =====


===== File: services\http\cache.ts =====
import Taro from '@tarojs/taro';
import type { CacheData } from './types';

// ÁºìÂ≠òÈîÆÂâçÁºÄ
const CACHE_PREFIX = 'http_cache_';

/**
 * ÁîüÊàêÁºìÂ≠òÈîÆ
 */
export function generateCacheKey(url: string, data?: any): string {
  return `${CACHE_PREFIX}${url}_${JSON.stringify(data || {})}`;
}

/**
 * Ëé∑ÂèñÁºìÂ≠òÊï∞ÊçÆ
 */
export function getCacheData<T>(key: string): CacheData<T> | null {
  try {
    const cacheData = Taro.getStorageSync(key);
    return cacheData ? JSON.parse(cacheData) : null;
  } catch (error) {
    console.error('Ëé∑ÂèñÁºìÂ≠òÊï∞ÊçÆÂ§±Ë¥•', error);
    return null;
  }
}

/**
 * ËÆæÁΩÆÁºìÂ≠òÊï∞ÊçÆ
 */
export function setCacheData<T>(key: string, data: T): void {
    try {
      const cacheData: CacheData<T> = {
        data,
        timestamp: Date.now()
      };
      
      Taro.setStorageSync(key, JSON.stringify(cacheData));
    } catch (error) {
      console.error('ËÆæÁΩÆÁºìÂ≠òÊï∞ÊçÆÂ§±Ë¥•', error);
    }
  }

/**
 * Ê∏ÖÈô§ÁºìÂ≠òÊï∞ÊçÆ
 */
export function clearCacheData(key: string): void {
  try {
    Taro.removeStorageSync(key);
  } catch (error) {
    console.error('Ê∏ÖÈô§ÁºìÂ≠òÊï∞ÊçÆÂ§±Ë¥•', error);
  }
}

/**
 * Ê∏ÖÈô§ÊâÄÊúâHTTPÁºìÂ≠ò
 */
export function clearAllCache(): void {
  try {
    const storageInfo = Taro.getStorageInfoSync();
    const keys = storageInfo.keys || [];
    
    keys.forEach(key => {
      if (key.startsWith(CACHE_PREFIX)) {
        Taro.removeStorageSync(key);
      }
    });
  } catch (error) {
    console.error('Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠òÂ§±Ë¥•', error);
  }
}

/**
 * Ê£ÄÊü•ÁºìÂ≠òÊòØÂê¶ÊúâÊïà
 */
export function isCacheValid<T>(cache: CacheData<T>, cacheTime: number): boolean {
  if (!cache || !cache.timestamp) return false;
  
  return Date.now() - cache.timestamp < cacheTime;
}
===== End of File: services\http\cache.ts =====


===== File: services\http\config.ts =====
import type { RequestConfig } from './types';

// APIÂü∫Á°ÄURL
export const API_BASE_URL = {
  // ÂºÄÂèëÁéØÂ¢É
  development: 'https://dev-api.example.com/v1',
  // Áîü‰∫ßÁéØÂ¢É
  production: 'https://api.example.com/v1'
};

// ÁéØÂ¢ÉÂà§Êñ≠
export const ENV = process.env.NODE_ENV || 'development';

// HTTPÁä∂ÊÄÅÁ†Å
export const HTTP_STATUS = {
  SUCCESS: 200,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  SERVER_ERROR: 500
};

// ‰∏öÂä°Áä∂ÊÄÅÁ†Å
export const BUSINESS_CODE = {
  SUCCESS: 0,           // ÊàêÂäü
  TOKEN_EXPIRED: 10001, // tokenËøáÊúü
  PARAM_ERROR: 10002,   // ÂèÇÊï∞ÈîôËØØ
  SERVER_ERROR: 50000   // ÊúçÂä°Âô®ÈîôËØØ
};

// ÈªòËÆ§ËØ∑Ê±ÇÈÖçÁΩÆ
export const DEFAULT_CONFIG: RequestConfig = {
  baseURL: API_BASE_URL[ENV],
  showLoading: true,
  loadingText: 'Âä†ËΩΩ‰∏≠',
  showErrorToast: true,
  headers: {
    'Content-Type': 'application/json'
  },
  timeout: 10000,       // 10Áßí
  useCache: false,
  cacheTime: 5 * 60 * 1000,  // 5ÂàÜÈíü
  retry: 0,
  retryDelay: 1000,
  withToken: true
};
===== End of File: services\http\config.ts =====


===== File: services\http\errorHandler.ts =====
import Taro from '@tarojs/taro';
import { HTTP_STATUS, BUSINESS_CODE } from './config';
import type { RequestError, RequestOptions } from './types';

/**
 * Â§ÑÁêÜHTTPÁä∂ÊÄÅÈîôËØØ
 */
export function handleHttpError(statusCode: number): RequestError {
  let message = 'Êú™Áü•ÈîôËØØ';
  
  switch (statusCode) {
    case HTTP_STATUS.BAD_REQUEST:
      message = 'ËØ∑Ê±ÇÂèÇÊï∞ÈîôËØØ';
      break;
    case HTTP_STATUS.UNAUTHORIZED:
      message = 'Êú™ÊéàÊùÉÔºåËØ∑ÁôªÂΩï';
      break;
    case HTTP_STATUS.FORBIDDEN:
      message = 'Ê≤°ÊúâÊùÉÈôêËÆøÈóÆ';
      break;
    case HTTP_STATUS.NOT_FOUND:
      message = 'ËØ∑Ê±ÇËµÑÊ∫ê‰∏çÂ≠òÂú®';
      break;
    case HTTP_STATUS.SERVER_ERROR:
      message = 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ';
      break;
    default:
      message = `HTTPÈîôËØØ (${statusCode})`;
  }
  
  return {
    code: statusCode,
    message
  };
}

/**
 * Â§ÑÁêÜ‰∏öÂä°Áä∂ÊÄÅÈîôËØØ
 */
export function handleBusinessError<T>(response: { code: number; message: string; data?: T }): RequestError {
  let message = response.message || 'Êú™Áü•ÈîôËØØ';
  
  switch (response.code) {
    case BUSINESS_CODE.TOKEN_EXPIRED:
      message = 'ÁôªÂΩïÂ∑≤ËøáÊúüÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï';
      break;
    case BUSINESS_CODE.PARAM_ERROR:
      message = 'ÂèÇÊï∞ÈîôËØØ';
      break;
    case BUSINESS_CODE.SERVER_ERROR:
      message = 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ';
      break;
  }
  
  return {
    code: response.code,
    message,
    data: response.data
  };
}

/**
 * Â§ÑÁêÜÁΩëÁªúÈîôËØØ
 */
export function handleNetworkError(error: any): RequestError {
  let message = 'ÁΩëÁªúÂºÇÂ∏∏';
  
  if (error?.errMsg) {
    if (error.errMsg.includes('timeout')) {
      message = 'ËØ∑Ê±ÇË∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªú';
    } else if (error.errMsg.includes('fail')) {
      message = 'ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËÆæÁΩÆ';
    }
  }
  
  return {
    code: -1,
    message
  };
}

/**
 * ÁªºÂêàÈîôËØØÂ§ÑÁêÜ
 */
export function handleRequestError(error: any, options: RequestOptions): RequestError {
  // Â∑≤Ê†ºÂºèÂåñÁöÑÈîôËØØ
  if (error && typeof error === 'object' && 'code' in error && 'message' in error) {
    if (options.showErrorToast) {
      Taro.showToast({
        title: error.message,
        icon: 'none',
        duration: 2000
      });
    }
    
    return error as RequestError;
  }
  
  // HTTPÈîôËØØ
  if (error && typeof error === 'object' && 'statusCode' in error) {
    const httpError = handleHttpError(error.statusCode);
    
    if (options.showErrorToast) {
      Taro.showToast({
        title: httpError.message,
        icon: 'none',
        duration: 2000
      });
    }
    
    return httpError;
  }
  
  // ÁΩëÁªúÈîôËØØ
  if (error && typeof error === 'object' && 'errMsg' in error) {
    const networkError = handleNetworkError(error);
    
    if (options.showErrorToast) {
      Taro.showToast({
        title: networkError.message,
        icon: 'none',
        duration: 2000
      });
    }
    
    return networkError;
  }
  
  // ÂÖ∂‰ªñÈîôËØØ
  const unknownError: RequestError = {
    code: -1,
    message: typeof error === 'string' ? error : 'Êú™Áü•ÈîôËØØ'
  };
  
  if (options.showErrorToast) {
    Taro.showToast({
      title: unknownError.message,
      icon: 'none',
      duration: 2000
    });
  }
  
  return unknownError;
}
===== End of File: services\http\errorHandler.ts =====


===== File: services\http\index.ts =====
import { request } from './request';
import type { RequestOptions} from './types';
import { addRequestInterceptor, addResponseInterceptor, addErrorInterceptor } from './interceptor';
import { clearAllCache, clearCacheData } from './cache';

/**
 * HTTPÂÆ¢Êà∑Á´Ø
 */
const http = {
  /**
   * ÂèëÈÄÅGETËØ∑Ê±Ç
   */
  get: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'GET', data, ...options }),
  
  /**
   * ÂèëÈÄÅPOSTËØ∑Ê±Ç
   */  
  post: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'POST', data, ...options }),
  
  /**
   * ÂèëÈÄÅPUTËØ∑Ê±Ç
   */
  put: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'PUT', data, ...options }),
  
  /**
   * ÂèëÈÄÅDELETEËØ∑Ê±Ç
   */
  delete: <T = any>(url: string, data?: any, options?: Partial<RequestOptions>) => 
    request<T>({ url, method: 'DELETE', data, ...options }),
  
  /**
   * ÂéüÂßãËØ∑Ê±ÇÊñπÊ≥ï
   */
  request,
  
  /**
   * Ê∏ÖÈô§ÊåáÂÆöÁºìÂ≠ò
   */
  clearCache: clearCacheData,
  
  /**
   * Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠ò
   */
  clearAllCache,
  
  /**
   * Ê∑ªÂä†ËØ∑Ê±ÇÊã¶Êà™Âô®
   */
  addRequestInterceptor,
  
  /**
   * Ê∑ªÂä†ÂìçÂ∫îÊã¶Êà™Âô®
   */
  addResponseInterceptor,
  
  /**
   * Ê∑ªÂä†ÈîôËØØÊã¶Êà™Âô®
   */
  addErrorInterceptor
};

export default http;

// ÂØºÂá∫Á±ªÂûã
export * from './types';
export { DEFAULT_CONFIG } from './config';
===== End of File: services\http\index.ts =====


===== File: services\http\interceptor.ts =====
import Taro from '@tarojs/taro';
import type { RequestInterceptor, ResponseInterceptor, ErrorInterceptor, RequestOptions, ResponseData } from './types';
import { BUSINESS_CODE } from './config';

// ËØ∑Ê±ÇÊã¶Êà™Âô®Êï∞ÁªÑ
const requestInterceptors: RequestInterceptor[] = [];

// ÂìçÂ∫îÊã¶Êà™Âô®Êï∞ÁªÑ
const responseInterceptors: ResponseInterceptor[] = [];

// ÈîôËØØÊã¶Êà™Âô®Êï∞ÁªÑ
const errorInterceptors: ErrorInterceptor[] = [];

/**
 * Ê∑ªÂä†ËØ∑Ê±ÇÊã¶Êà™Âô®
 */
export function addRequestInterceptor(interceptor: RequestInterceptor): void {
  requestInterceptors.push(interceptor);
}

/**
 * Ê∑ªÂä†ÂìçÂ∫îÊã¶Êà™Âô®
 */
export function addResponseInterceptor(interceptor: ResponseInterceptor): void {
  responseInterceptors.push(interceptor);
}

/**
 * Ê∑ªÂä†ÈîôËØØÊã¶Êà™Âô®
 */
export function addErrorInterceptor(interceptor: ErrorInterceptor): void {
  errorInterceptors.push(interceptor);
}

/**
 * Â∫îÁî®ËØ∑Ê±ÇÊã¶Êà™Âô®
 */
export async function applyRequestInterceptors(options: RequestOptions): Promise<RequestOptions> {
  let config = { ...options };
  
  for (const interceptor of requestInterceptors) {
    config = await interceptor(config);
  }
  
  return config;
}

/**
 * Â∫îÁî®ÂìçÂ∫îÊã¶Êà™Âô®
 */
export async function applyResponseInterceptors<T>(response: ResponseData<T>, options: RequestOptions): Promise<ResponseData<T>> {
  let result = { ...response };
  
  for (const interceptor of responseInterceptors) {
    result = await interceptor(result, options);
  }
  
  return result;
}

/**
 * Â∫îÁî®ÈîôËØØÊã¶Êà™Âô®
 */
export async function applyErrorInterceptors(error: any, options: RequestOptions): Promise<any> {
  let result = error;
  
  for (const interceptor of errorInterceptors) {
    result = await interceptor(result, options);
  }
  
  return result;
}

// Ê∑ªÂä†ÈªòËÆ§TokenÊã¶Êà™Âô®
addRequestInterceptor(async (options) => {
  if (options.withToken) {
    try {
      const token = Taro.getStorageSync('token');
      if (token) {
        options.headers = {
          ...options.headers,
          'Authorization': `Bearer ${token}`
        };
      }
    } catch (error) {
      console.error('Ëé∑ÂèñTokenÂ§±Ë¥•', error);
    }
  }
  
  return options;
});

// Ê∑ªÂä†ÈªòËÆ§Êó•ÂøóÊã¶Êà™Âô®
if (process.env.NODE_ENV === 'development') {
  // ËØ∑Ê±ÇÊó•Âøó
  addRequestInterceptor((options) => {
    console.log(`[Request] ${options.method} ${options.url}`, options.data);
    return options;
  });
  
  // ÂìçÂ∫îÊó•Âøó
  addResponseInterceptor((response, options) => {
    console.log(`[Response] ${options.method} ${options.url}`, response);
    return response;
  });
  
  // ÈîôËØØÊó•Âøó
  addErrorInterceptor((error, options) => {
    console.error(`[Error] ${options.method} ${options.url}`, error);
    return error;
  });
}

// Ê∑ªÂä†ÈªòËÆ§TokenËøáÊúüÂ§ÑÁêÜ
addErrorInterceptor((error) => {
  if (error && error.code === BUSINESS_CODE.TOKEN_EXPIRED) {
    // Ê∏ÖÈô§Êú¨Âú∞Token
    Taro.removeStorageSync('token');
    
    // Ë∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µ
    Taro.navigateTo({
      url: '/pages/login/index'
    });
  }
  
  return error;
});
===== End of File: services\http\interceptor.ts =====


===== File: services\http\request.ts =====
import Taro from '@tarojs/taro';
import type { RequestOptions, ResponseData } from './types';
import { DEFAULT_CONFIG, BUSINESS_CODE } from './config';
import { applyRequestInterceptors, applyResponseInterceptors, applyErrorInterceptors } from './interceptor';
import { handleRequestError, handleBusinessError } from './errorHandler';
import { generateCacheKey, getCacheData, setCacheData, isCacheValid } from './cache';

// ËØ∑Ê±ÇËÆ°Êï∞Âô®
let loadingCount = 0;

/**
 * ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
 */
function showLoading(text: string): void {
  loadingCount++;
  
  if (loadingCount === 1) {
    Taro.showLoading({ title: text });
  }
}

/**
 * ÈöêËóèÂä†ËΩΩÊèêÁ§∫
 */
function hideLoading(): void {
  loadingCount--;
  
  if (loadingCount === 0) {
    Taro.hideLoading();
  }
}

/**
 * Âª∂ËøüÂáΩÊï∞
 */
function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Áªü‰∏ÄËØ∑Ê±ÇÂáΩÊï∞
 */
export async function request<T = any>(options: RequestOptions): Promise<T> {
  // ÂêàÂπ∂ÈÖçÁΩÆ
  const config = { ...DEFAULT_CONFIG, ...options };
  const { url, method = 'GET', data, baseURL, showLoading: shouldShowLoading, loadingText, useCache, cacheTime, retry, retryDelay } = config;
  
  // ÂÆåÊï¥URL
  const fullUrl = url.startsWith('http') ? url : `${baseURL}${url.startsWith('/') ? url : `/${url}`}`;
  
  // Ê£ÄÊü•ÁºìÂ≠ò
  if (useCache && method === 'GET') {
    const cacheKey = generateCacheKey(fullUrl, data);
    const cached = getCacheData<T>(cacheKey);
    
    if (cached && isCacheValid(cached, cacheTime || DEFAULT_CONFIG.cacheTime || 0)) {
      return cached.data;
    }
  }
  
  // ËØ∑Ê±ÇÂâçÂ§ÑÁêÜ
  let requestConfig = await applyRequestInterceptors({ ...config, url: fullUrl });
  
  // ÈáçËØïËÆ°Êï∞
  let retryCount = retry || 0;
  
  // ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
  if (shouldShowLoading) {
    showLoading(loadingText || 'Âä†ËΩΩ‰∏≠');
  }
  
  try {
    // ÂèëÈÄÅËØ∑Ê±Ç
    const executeRequest = async (): Promise<T> => {
      try {
        const response = await Taro.request({
          url: fullUrl,
          data: requestConfig.data,
          method: requestConfig.method as any,
          header: requestConfig.headers,
          timeout: requestConfig.timeout
        });
        
        // HTTPÁä∂ÊÄÅÊ£ÄÊü•
        if (response.statusCode !== 200) {
          throw { statusCode: response.statusCode };
        }
        
        // ‰∏öÂä°Áä∂ÊÄÅÊ£ÄÊü•
        const responseData = response.data as ResponseData<T>;
        
        if (responseData.code !== BUSINESS_CODE.SUCCESS) {
          throw handleBusinessError(responseData);
        }
        
        // ÂìçÂ∫îÊã¶Êà™Â§ÑÁêÜ
        const processedResponse = await applyResponseInterceptors(responseData, requestConfig);
        
        // ËÆæÁΩÆÁºìÂ≠ò
        if (useCache && method === 'GET') {
          const cacheKey = generateCacheKey(fullUrl, data);
          setCacheData(cacheKey, processedResponse.data);
        }
        
        return processedResponse.data;
      } catch (error) {
        // ËØ∑Ê±ÇÂ§±Ë¥•‰ΩÜËøòÊúâÈáçËØïÊ¨°Êï∞
        if (retryCount > 0) {
          retryCount--;
          // Âª∂ËøüÂêéÈáçËØï
          await delay(retryDelay || DEFAULT_CONFIG.retryDelay || 1000);
          return executeRequest();
        }
        
        // ÈáçËØïÊ¨°Êï∞Áî®ÂÆåÔºåÂêë‰∏äÊäõÂá∫ÈîôËØØ
        throw error;
      }
    };
    
    return await executeRequest();
  } catch (error) {
    // ÈîôËØØÂ§ÑÁêÜ
    const processedError = await applyErrorInterceptors(error, requestConfig);
    throw handleRequestError(processedError, requestConfig);
  } finally {
    // ÈöêËóèÂä†ËΩΩÊèêÁ§∫
    if (shouldShowLoading) {
      hideLoading();
    }
  }
}
===== End of File: services\http\request.ts =====


===== File: services\http\types.ts =====
// ËØ∑Ê±ÇÊñπÊ≥ïÁ±ªÂûã
export type RequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';

// ËØ∑Ê±ÇÈÖçÁΩÆ
export interface RequestConfig {
  // Âü∫Á°ÄURL
  baseURL?: string;
  // ÊòØÂê¶ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
  showLoading?: boolean;
  // Âä†ËΩΩÊèêÁ§∫ÊñáÂ≠ó
  loadingText?: string;
  // ÊòØÂê¶ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
  showErrorToast?: boolean;
  // ËØ∑Ê±ÇÂ§¥
  headers?: Record<string, string>;
  // Ë∂ÖÊó∂Êó∂Èó¥(ms)
  timeout?: number;
  // ÊòØÂê¶‰ΩøÁî®ÁºìÂ≠ò(‰ªÖGETËØ∑Ê±Ç)
  useCache?: boolean;
  // ÁºìÂ≠òÊó∂Èó¥(ms)
  cacheTime?: number;
  // ÈáçËØïÊ¨°Êï∞
  retry?: number;
  // ÈáçËØïÂª∂Ëøü(ms)
  retryDelay?: number;
  // ÊòØÂê¶Ëá™Âä®Êê∫Â∏¶token
  withToken?: boolean;
}

// ËØ∑Ê±ÇÂèÇÊï∞
export interface RequestOptions extends RequestConfig {
  // ËØ∑Ê±ÇÂú∞ÂùÄ
  url: string;
  // ËØ∑Ê±ÇÊñπÊ≥ï
  method?: RequestMethod;
  // ËØ∑Ê±ÇÊï∞ÊçÆ
  data?: any;
}

// ÂìçÂ∫îÊï∞ÊçÆÁªìÊûÑ
export interface ResponseData<T = any> {
  code: number;
  message: string;
  data: T;
}

// ÁºìÂ≠òÊï∞ÊçÆÁªìÊûÑ
export interface CacheData<T = any> {
  data: T;
  timestamp: number;
}

// ÈîôËØØ‰ø°ÊÅØÁªìÊûÑ
export interface RequestError {
  code: number;
  message: string;
  data?: any;
}

// ËØ∑Ê±ÇÊã¶Êà™Âô®
export type RequestInterceptor = (options: RequestOptions) => RequestOptions | Promise<RequestOptions>;

// ÂìçÂ∫îÊã¶Êà™Âô®
export type ResponseInterceptor = <T>(response: ResponseData<T>, options: RequestOptions) => ResponseData<T> | Promise<ResponseData<T>>;

// ÈîôËØØÊã¶Êà™Âô®
export type ErrorInterceptor = (error: any, options: RequestOptions) => any;
===== End of File: services\http\types.ts =====


===== File: styles\theme.css =====
:root,
page{
  /* ‰∏ªÂìÅÁâåËâ≤Á≥ª - ËìùËâ≤Á≥ªÂàóÔºå‰ªéÊµÖÂà∞Ê∑± */
  --nutui-brand-1: #EFF6FF; /* ÊúÄÊµÖËìùËâ≤ - ÈÄÇÂêàËÉåÊôØ„ÄÅÈ´ò‰∫ÆÂå∫Âüü */
  --nutui-brand-2: #DBEAFE; /* ÊµÖËìùËâ≤ - Áî®‰∫éËΩªÈáèÂº∫Ë∞ÉÂíåËÉåÊôØ */
  --nutui-brand-3: #BFDBFE; /* ‰∏≠ÊµÖËìùËâ≤ - Á¶ÅÁî®Áä∂ÊÄÅ */
  --nutui-brand-4: #93C5FD; /* Ê∏êÂèòËµ∑ÂßãËâ≤ */
  --nutui-brand-5: #60A5FA; /* ‰∏≠Èó¥ËøáÊ∏°Ëâ≤ */
  --nutui-brand-6: #3B82F6; /* ‰∏ªËâ≤Ë∞É - ‰∫ÆËìùËâ≤ */
  --nutui-brand-7: #2563EB; /* ÊåâÂéãÁä∂ÊÄÅËâ≤ - ‰∏éTabBarÈÄâ‰∏≠Ëâ≤Áõ∏Âêå */
  --nutui-brand-8: #1D4ED8; /* Ê∑±ËìùËâ≤ - Ê∏êÂèòÁªìÊùüËâ≤ */
  --nutui-brand-9: #1E40AF; /* ÂæàÊ∑±ËìùËâ≤ */
  --nutui-brand-10: #1E3A8A; /* ÊúÄÊ∑±ËìùËâ≤ */
  
  /* Ê∏êÂèòËâ≤ËÆæÁΩÆ */
  --nutui-brand-stop-1: #60A5FA; /* Ê∏êÂèòËµ∑ÂßãËâ≤ - ÂØπÂ∫îbrand-5 */
  --nutui-brand-stop-2: #2563EB; /* Ê∏êÂèòÁªìÊùüËâ≤ - ÂØπÂ∫îbrand-7Ôºå‰∏éTabBar‰∏ÄËá¥ */
  
  /* Âº∫Ë∞ÉËâ≤ - Áî®‰∫éÁâπÊÆäÂÖÉÁ¥†ÔºåÈò≤Ê∞¥‰∏ªÈ¢òÂèØ‰ª•Áî®ËìùÁªøËâ≤ */
  --nutui-secondary-1: #0EA5E9; /* ËìùÁªøËâ≤Âº∫Ë∞ÉËâ≤ - ‰∏éÊ∞¥Áõ∏ÂÖ≥ */
  
  /* ‰∏ªËâ≤Ë∞ÉÊò†Â∞Ñ */
  --nutui-color-primary: #2563EB; /* ‰∏éTabBarÈÄâ‰∏≠Ëâ≤‰øùÊåÅ‰∏ÄËá¥ */
  --nutui-color-primary-stop-1: var(--nutui-brand-stop-1);
  --nutui-color-primary-stop-2: var(--nutui-brand-stop-2);
  --nutui-color-primary-pressed: var(--nutui-brand-8);
  --nutui-color-primary-disabled: var(--nutui-brand-3);
  --nutui-color-primary-text: #FFFFFF;
  --nutui-color-primary-light: var(--nutui-brand-2);
  
  /* ÊñáÊú¨Á≥ªÁªü */
  --nutui-gray-7: #1F2937; /* ‰∏ªË¶ÅÊñáÊú¨ */
  --nutui-gray-6: #4B5563; /* ÈáçË¶ÅÊ¨°Ë¶ÅÊñáÊú¨ */
  --nutui-gray-5: #6B7280; /* Ê¨°Ë¶ÅÊñáÊú¨ */
  --nutui-gray-4: #9CA3AF; /* ÂàÜÂâ≤Á∫ø/Á¶ÅÁî®ÊñáÊú¨ */
  
  /* ËÉåÊôØÁ≥ªÁªü */
  --nutui-gray-1: #FFFFFF; /* ÁôΩËâ≤ËÉåÊôØ - ‰∏énavigationBarËÉåÊôØ‰∏ÄËá¥ */
  --nutui-gray-2: #F9FAFB; /* ÊµÖÁÅ∞ËÉåÊôØ - Âç°ÁâáÂÜÖÂµåËÉåÊôØ */
  --nutui-gray-3: #F3F4F6; /* ÁÅ∞Ëâ≤ËÉåÊôØ - È°µÈù¢Âü∫Â∫ïËâ≤ */
  
  /* ÂäüËÉΩËâ≤ËÆæÁΩÆ - ‰∏éÈò≤Ê∞¥ÊúçÂä°‰∏ªÈ¢òÁõ∏ÂçèË∞É */
  --nutui-color-success: #10B981; /* ÊàêÂäüËâ≤ - ÁªøËâ≤Ôºå‰ª£Ë°®ÂÆâÂÖ®ÂèØÈù† */
  --nutui-color-success-disabled: #D1FAE5;
  --nutui-color-danger: #EF4444; /* Âç±Èô©Ëâ≤ - Á∫¢Ëâ≤Ôºå‰ª£Ë°®Ë≠¶Á§∫ */
  --nutui-color-danger-disabled: #FEE2E2;
  --nutui-color-warning: #F59E0B; /* Ë≠¶ÂëäËâ≤ - Ê©ôËâ≤ */
  --nutui-color-warning-disabled: #FEF3C7;
  --nutui-color-info: #3B82F6; /* ‰ø°ÊÅØËâ≤ - ËìùËâ≤Ôºå‰∏éÊ∞¥Áõ∏ÂÖ≥ */
  --nutui-color-info-disabled: #BFDBFE;
  --nutui-color-info-background: linear-gradient(315deg, #60A5FA 0%, #2563EB 100%);
  
  /* TabBarÈ¢úËâ≤ËÆæÁΩÆ - ‰øùÊåÅ‰∏ÄËá¥ÊÄß */
  --nutui-tabbar-active-color: #2563EB; /* ‰∏éTabBarÈÄâ‰∏≠Ëâ≤‰øùÊåÅ‰∏ÄËá¥ */
  --nutui-tabbar-inactive-color: #999999; /* ‰∏éTabBarÊú™ÈÄâ‰∏≠Ëâ≤‰øùÊåÅ‰∏ÄËá¥ */

  --nutui-picker-title-ok-font-size: 16px;/*pickerÈù¢ÊùøÁ°ÆËÆ§Â≠óÂè∑*/
  --nutui-picker-item-height: 40px; /*pickerÈù¢ÊùøÊØè‰∏ÄÊù°Êï∞ÊçÆÈ´òÂ∫¶*/
  --nutui-picker-list-height: 180px;
  --nutui-picker-title-cancel-font-size: 16px;
}
===== End of File: styles\theme.css =====

